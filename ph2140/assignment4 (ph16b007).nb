(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 11.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    336730,       6616]
NotebookOptionsPosition[    333542,       6514]
NotebookOutlinePosition[    333906,       6530]
CellTagsIndexPosition[    333863,       6527]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 StyleBox[
  RowBox[{"(*", 
   RowBox[{"Assignment", " ", "4"}], "*)"}],
  FontFamily->"Consolas",
  FontSize->16,
  FontWeight->"Bold"]], "Input",
 CellChangeTimes->{{3.7143877354399853`*^9, 3.7143877701319294`*^9}},
 TextAlignment->Center],

Cell[BoxData[
 RowBox[{"Remove", "[", "\"\<Global`*\>\"", "]"}]], "Input",
 CellChangeTimes->{{3.7141050625494895`*^9, 3.714105087025875*^9}, {
  3.7143876193479652`*^9, 3.714387641397073*^9}, {3.7143877181253*^9, 
  3.7143877202190714`*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"1.", " ", "Forced", " ", "Oscillator"}], " ", "*)"}]], "Input"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"soln", "=", 
  RowBox[{
   RowBox[{"DSolve", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{"x", "''"}], "[", "t", "]"}], "+", 
         RowBox[{"2", "*", "\[Beta]", "*", 
          RowBox[{
           RowBox[{"x", "'"}], "[", "t", "]"}]}], "+", 
         RowBox[{
          SuperscriptBox[
           SubscriptBox["\[Omega]", "0"], "2"], "*", 
          RowBox[{"x", "[", "t", "]"}]}]}], "\[Equal]", 
        RowBox[{"A", "*", 
         RowBox[{"Cos", " ", "[", 
          RowBox[{"2", 
           FractionBox["Pi", "\[Tau]"], "*", "t"}], "]"}]}]}], ",", 
       RowBox[{
        RowBox[{"x", "[", "0", "]"}], "\[Equal]", "0"}], ",", 
       RowBox[{
        RowBox[{
         RowBox[{"x", "'"}], "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], ",", 
     RowBox[{"x", "[", "t", "]"}], ",", "t"}], "]"}], "/.", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["\[Omega]", "0"], "\[Rule]", 
     RowBox[{"2", "*", "Pi"}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.7141051104344816`*^9, 3.7141053386822767`*^9}, {
   3.7141054624770517`*^9, 3.714105484510079*^9}, {3.7141060011292686`*^9, 
   3.714106004308543*^9}, {3.714109092177658*^9, 3.7141090976095085`*^9}, {
   3.71410930966883*^9, 3.7141093376506357`*^9}, {3.714109400119904*^9, 
   3.7141094089791765`*^9}, 3.7141094474623795`*^9, {3.7141097935731072`*^9, 
   3.7141098052756777`*^9}, 3.7141098424701147`*^9, 3.7141099223715324`*^9, {
   3.714109980641041*^9, 3.714109984719735*^9}, {3.7141101692150126`*^9, 
   3.7141101814967175`*^9}, {3.7141994130487957`*^9, 3.71419941792027*^9}, {
   3.71419948563081*^9, 3.714199488539873*^9}, {3.714223791936819*^9, 
   3.714223792593077*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", "A", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "\[Beta]"}], "-", 
            SqrtBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "4"}], " ", 
               SuperscriptBox["\[Pi]", "2"]}], "+", 
              SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
        SuperscriptBox["\[Pi]", "2"], " ", "\[Beta]", " ", 
        SuperscriptBox["\[Tau]", "2"]}], "+", 
       RowBox[{"4", " ", "A", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "\[Beta]"}], "+", 
            SqrtBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "4"}], " ", 
               SuperscriptBox["\[Pi]", "2"]}], "+", 
              SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
        SuperscriptBox["\[Pi]", "2"], " ", "\[Beta]", " ", 
        SuperscriptBox["\[Tau]", "2"]}], "-", 
       RowBox[{"4", " ", "A", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "\[Beta]"}], "-", 
            SqrtBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "4"}], " ", 
               SuperscriptBox["\[Pi]", "2"]}], "+", 
              SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
        SuperscriptBox["\[Pi]", "2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[Pi]", "2"]}], "+", 
          SuperscriptBox["\[Beta]", "2"]}]], " ", 
        SuperscriptBox["\[Tau]", "2"]}], "-", 
       RowBox[{"4", " ", "A", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "\[Beta]"}], "+", 
            SqrtBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "4"}], " ", 
               SuperscriptBox["\[Pi]", "2"]}], "+", 
              SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
        SuperscriptBox["\[Pi]", "2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[Pi]", "2"]}], "+", 
          SuperscriptBox["\[Beta]", "2"]}]], " ", 
        SuperscriptBox["\[Tau]", "2"]}], "-", 
       RowBox[{"4", " ", "A", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "\[Beta]"}], "-", 
            SqrtBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "4"}], " ", 
               SuperscriptBox["\[Pi]", "2"]}], "+", 
              SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
        SuperscriptBox["\[Pi]", "2"], " ", "\[Beta]", " ", 
        SuperscriptBox["\[Tau]", "4"]}], "+", 
       RowBox[{"4", " ", "A", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "\[Beta]"}], "+", 
            SqrtBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "4"}], " ", 
               SuperscriptBox["\[Pi]", "2"]}], "+", 
              SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
        SuperscriptBox["\[Pi]", "2"], " ", "\[Beta]", " ", 
        SuperscriptBox["\[Tau]", "4"]}], "+", 
       RowBox[{"4", " ", "A", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "\[Beta]"}], "-", 
            SqrtBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "4"}], " ", 
               SuperscriptBox["\[Pi]", "2"]}], "+", 
              SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
        SuperscriptBox["\[Pi]", "2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[Pi]", "2"]}], "+", 
          SuperscriptBox["\[Beta]", "2"]}]], " ", 
        SuperscriptBox["\[Tau]", "4"]}], "+", 
       RowBox[{"4", " ", "A", " ", 
        SuperscriptBox["\[ExponentialE]", 
         RowBox[{"t", " ", 
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "\[Beta]"}], "+", 
            SqrtBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "4"}], " ", 
               SuperscriptBox["\[Pi]", "2"]}], "+", 
              SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
        SuperscriptBox["\[Pi]", "2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[Pi]", "2"]}], "+", 
          SuperscriptBox["\[Beta]", "2"]}]], " ", 
        SuperscriptBox["\[Tau]", "4"]}], "+", 
       RowBox[{"8", " ", "A", " ", 
        SuperscriptBox["\[Pi]", "2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[Pi]", "2"]}], "+", 
          SuperscriptBox["\[Beta]", "2"]}]], " ", 
        SuperscriptBox["\[Tau]", "2"], " ", 
        RowBox[{"Cos", "[", 
         FractionBox[
          RowBox[{"2", " ", "\[Pi]", " ", "t"}], "\[Tau]"], "]"}]}], "-", 
       RowBox[{"8", " ", "A", " ", 
        SuperscriptBox["\[Pi]", "2"], " ", 
        SqrtBox[
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[Pi]", "2"]}], "+", 
          SuperscriptBox["\[Beta]", "2"]}]], " ", 
        SuperscriptBox["\[Tau]", "4"], " ", 
        RowBox[{"Cos", "[", 
         FractionBox[
          RowBox[{"2", " ", "\[Pi]", " ", "t"}], "\[Tau]"], "]"}]}], "-", 
       RowBox[{"8", " ", "A", " ", "\[Pi]", " ", "\[Beta]", " ", 
        SqrtBox[
         RowBox[{
          RowBox[{
           RowBox[{"-", "4"}], " ", 
           SuperscriptBox["\[Pi]", "2"]}], "+", 
          SuperscriptBox["\[Beta]", "2"]}]], " ", 
        SuperscriptBox["\[Tau]", "3"], " ", 
        RowBox[{"Sin", "[", 
         FractionBox[
          RowBox[{"2", " ", "\[Pi]", " ", "t"}], "\[Tau]"], "]"}]}]}], ")"}], 
     "/", 
     RowBox[{"(", 
      RowBox[{"2", " ", 
       SqrtBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "4"}], " ", 
          SuperscriptBox["\[Pi]", "2"]}], "+", 
         SuperscriptBox["\[Beta]", "2"]}]], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{
          RowBox[{"-", "4"}], " ", 
          SuperscriptBox["\[Pi]", "2"]}], "+", 
         RowBox[{"4", " ", 
          SuperscriptBox["\[Pi]", "2"], " ", 
          SuperscriptBox["\[Tau]", "2"]}], "-", 
         RowBox[{"2", " ", 
          SuperscriptBox["\[Beta]", "2"], " ", 
          SuperscriptBox["\[Tau]", "2"]}], "+", 
         RowBox[{"2", " ", "\[Beta]", " ", 
          SqrtBox[
           RowBox[{
            RowBox[{
             RowBox[{"-", "4"}], " ", 
             SuperscriptBox["\[Pi]", "2"]}], "+", 
            SuperscriptBox["\[Beta]", "2"]}]], " ", 
          SuperscriptBox["\[Tau]", "2"]}]}], ")"}], " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"4", " ", 
          SuperscriptBox["\[Pi]", "2"]}], "-", 
         RowBox[{"4", " ", 
          SuperscriptBox["\[Pi]", "2"], " ", 
          SuperscriptBox["\[Tau]", "2"]}], "+", 
         RowBox[{"2", " ", 
          SuperscriptBox["\[Beta]", "2"], " ", 
          SuperscriptBox["\[Tau]", "2"]}], "+", 
         RowBox[{"2", " ", "\[Beta]", " ", 
          SqrtBox[
           RowBox[{
            RowBox[{
             RowBox[{"-", "4"}], " ", 
             SuperscriptBox["\[Pi]", "2"]}], "+", 
            SuperscriptBox["\[Beta]", "2"]}]], " ", 
          SuperscriptBox["\[Tau]", "2"]}]}], ")"}]}], ")"}]}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.7141053476198697`*^9, 3.7141054873537817`*^9, 
  3.7141056349802947`*^9, 3.7141056656075153`*^9, 3.714106005773553*^9, 
  3.7141099945767245`*^9, 3.714111298698868*^9, 3.7141945754580164`*^9, 
  3.7141948458091073`*^9, 3.714199426039356*^9, 3.7141994907904606`*^9, 
  3.714223690753541*^9, 3.714223794546144*^9, 3.714387851687558*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FullSimplify", "[", 
  RowBox[{"soln", "[", 
   RowBox[{"[", "1", "]"}], "]"}], "]"}]], "Input",
 CellChangeTimes->{{3.714387828497755*^9, 3.7143878598595085`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"A", " ", 
      SuperscriptBox["\[ExponentialE]", 
       RowBox[{
        RowBox[{"-", "t"}], " ", 
        RowBox[{"(", 
         RowBox[{"\[Beta]", "+", 
          SqrtBox[
           RowBox[{
            RowBox[{
             RowBox[{"-", "4"}], " ", 
             SuperscriptBox["\[Pi]", "2"]}], "+", 
            SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
      SuperscriptBox["\[Tau]", "2"], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"\[Pi]", " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{
            RowBox[{"-", 
             RowBox[{"(", 
              RowBox[{"1", "+", 
               SuperscriptBox["\[ExponentialE]", 
                RowBox[{"2", " ", "t", " ", 
                 SqrtBox[
                  RowBox[{
                   RowBox[{
                    RowBox[{"-", "4"}], " ", 
                    SuperscriptBox["\[Pi]", "2"]}], "+", 
                   SuperscriptBox["\[Beta]", "2"]}]]}]]}], ")"}]}], " ", 
            SqrtBox[
             RowBox[{
              RowBox[{
               RowBox[{"-", "4"}], " ", 
               SuperscriptBox["\[Pi]", "2"]}], "+", 
              SuperscriptBox["\[Beta]", "2"]}]], " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["\[Tau]", "2"]}], ")"}]}], "-", 
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["\[ExponentialE]", 
               RowBox[{"2", " ", "t", " ", 
                SqrtBox[
                 RowBox[{
                  RowBox[{
                   RowBox[{"-", "4"}], " ", 
                   SuperscriptBox["\[Pi]", "2"]}], "+", 
                  SuperscriptBox["\[Beta]", "2"]}]]}]]}], ")"}], " ", 
            "\[Beta]", " ", 
            RowBox[{"(", 
             RowBox[{"1", "+", 
              SuperscriptBox["\[Tau]", "2"]}], ")"}]}]}], ")"}]}], "+", 
        RowBox[{"2", " ", 
         SuperscriptBox["\[ExponentialE]", 
          RowBox[{"t", " ", 
           RowBox[{"(", 
            RowBox[{"\[Beta]", "+", 
             SqrtBox[
              RowBox[{
               RowBox[{
                RowBox[{"-", "4"}], " ", 
                SuperscriptBox["\[Pi]", "2"]}], "+", 
               SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
         SqrtBox[
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[Pi]", "2"]}], "+", 
           SuperscriptBox["\[Beta]", "2"]}]], " ", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"\[Pi]", " ", 
            RowBox[{"(", 
             RowBox[{
              RowBox[{"-", "1"}], "+", 
              SuperscriptBox["\[Tau]", "2"]}], ")"}], " ", 
            RowBox[{"Cos", "[", 
             FractionBox[
              RowBox[{"2", " ", "\[Pi]", " ", "t"}], "\[Tau]"], "]"}]}], "+", 
           RowBox[{"\[Beta]", " ", "\[Tau]", " ", 
            RowBox[{"Sin", "[", 
             FractionBox[
              RowBox[{"2", " ", "\[Pi]", " ", "t"}], "\[Tau]"], "]"}]}]}], 
          ")"}]}]}], ")"}]}], ")"}], "/", 
    RowBox[{"(", 
     RowBox[{"8", " ", "\[Pi]", " ", 
      SqrtBox[
       RowBox[{
        RowBox[{
         RowBox[{"-", "4"}], " ", 
         SuperscriptBox["\[Pi]", "2"]}], "+", 
        SuperscriptBox["\[Beta]", "2"]}]], " ", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{
         SuperscriptBox["\[Beta]", "2"], " ", 
         SuperscriptBox["\[Tau]", "2"]}], "+", 
        RowBox[{
         SuperscriptBox["\[Pi]", "2"], " ", 
         SuperscriptBox[
          RowBox[{"(", 
           RowBox[{
            RowBox[{"-", "1"}], "+", 
            SuperscriptBox["\[Tau]", "2"]}], ")"}], "2"]}]}], ")"}]}], 
     ")"}]}]}], "}"}]], "Output",
 CellChangeTimes->{3.7143878707208786`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "this", " ", "is", " ", "the", " ", "solution", " ", "to", " ", "the", " ",
     "forced", " ", "oscillator", " ", "differential", " ", "equation", " ", 
    "with", " ", "the", " ", "given", " ", "intial", " ", "conditions"}], 
   "*)"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7143878933632827`*^9, 3.7143879452546854`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"X", "[", "t_", "]"}], "=", 
   RowBox[{
    RowBox[{"x", "[", "t", "]"}], "/.", 
    RowBox[{"soln", "[", 
     RowBox[{"[", "1", "]"}], "]"}]}]}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7141055549090548`*^9, 3.714105564784145*^9}, {
   3.714105620134533*^9, 3.7141056284939485`*^9}, 3.7141056586855645`*^9, {
   3.7141060096623106`*^9, 3.714106021355562*^9}, {3.7141074050697975`*^9, 
   3.7141074312511396`*^9}, {3.7141076723431253`*^9, 3.71410777015727*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "4"}], " ", "A", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "\[Beta]"}], "-", 
         SqrtBox[
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[Pi]", "2"]}], "+", 
           SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
     SuperscriptBox["\[Pi]", "2"], " ", "\[Beta]", " ", 
     SuperscriptBox["\[Tau]", "2"]}], "+", 
    RowBox[{"4", " ", "A", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "\[Beta]"}], "+", 
         SqrtBox[
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[Pi]", "2"]}], "+", 
           SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
     SuperscriptBox["\[Pi]", "2"], " ", "\[Beta]", " ", 
     SuperscriptBox["\[Tau]", "2"]}], "-", 
    RowBox[{"4", " ", "A", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "\[Beta]"}], "-", 
         SqrtBox[
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[Pi]", "2"]}], "+", 
           SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
     SuperscriptBox["\[Pi]", "2"], " ", 
     SqrtBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", 
        SuperscriptBox["\[Pi]", "2"]}], "+", 
       SuperscriptBox["\[Beta]", "2"]}]], " ", 
     SuperscriptBox["\[Tau]", "2"]}], "-", 
    RowBox[{"4", " ", "A", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "\[Beta]"}], "+", 
         SqrtBox[
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[Pi]", "2"]}], "+", 
           SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
     SuperscriptBox["\[Pi]", "2"], " ", 
     SqrtBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", 
        SuperscriptBox["\[Pi]", "2"]}], "+", 
       SuperscriptBox["\[Beta]", "2"]}]], " ", 
     SuperscriptBox["\[Tau]", "2"]}], "-", 
    RowBox[{"4", " ", "A", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "\[Beta]"}], "-", 
         SqrtBox[
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[Pi]", "2"]}], "+", 
           SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
     SuperscriptBox["\[Pi]", "2"], " ", "\[Beta]", " ", 
     SuperscriptBox["\[Tau]", "4"]}], "+", 
    RowBox[{"4", " ", "A", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "\[Beta]"}], "+", 
         SqrtBox[
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[Pi]", "2"]}], "+", 
           SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
     SuperscriptBox["\[Pi]", "2"], " ", "\[Beta]", " ", 
     SuperscriptBox["\[Tau]", "4"]}], "+", 
    RowBox[{"4", " ", "A", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "\[Beta]"}], "-", 
         SqrtBox[
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[Pi]", "2"]}], "+", 
           SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
     SuperscriptBox["\[Pi]", "2"], " ", 
     SqrtBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", 
        SuperscriptBox["\[Pi]", "2"]}], "+", 
       SuperscriptBox["\[Beta]", "2"]}]], " ", 
     SuperscriptBox["\[Tau]", "4"]}], "+", 
    RowBox[{"4", " ", "A", " ", 
     SuperscriptBox["\[ExponentialE]", 
      RowBox[{"t", " ", 
       RowBox[{"(", 
        RowBox[{
         RowBox[{"-", "\[Beta]"}], "+", 
         SqrtBox[
          RowBox[{
           RowBox[{
            RowBox[{"-", "4"}], " ", 
            SuperscriptBox["\[Pi]", "2"]}], "+", 
           SuperscriptBox["\[Beta]", "2"]}]]}], ")"}]}]], " ", 
     SuperscriptBox["\[Pi]", "2"], " ", 
     SqrtBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", 
        SuperscriptBox["\[Pi]", "2"]}], "+", 
       SuperscriptBox["\[Beta]", "2"]}]], " ", 
     SuperscriptBox["\[Tau]", "4"]}], "+", 
    RowBox[{"8", " ", "A", " ", 
     SuperscriptBox["\[Pi]", "2"], " ", 
     SqrtBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", 
        SuperscriptBox["\[Pi]", "2"]}], "+", 
       SuperscriptBox["\[Beta]", "2"]}]], " ", 
     SuperscriptBox["\[Tau]", "2"], " ", 
     RowBox[{"Cos", "[", 
      FractionBox[
       RowBox[{"2", " ", "\[Pi]", " ", "t"}], "\[Tau]"], "]"}]}], "-", 
    RowBox[{"8", " ", "A", " ", 
     SuperscriptBox["\[Pi]", "2"], " ", 
     SqrtBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", 
        SuperscriptBox["\[Pi]", "2"]}], "+", 
       SuperscriptBox["\[Beta]", "2"]}]], " ", 
     SuperscriptBox["\[Tau]", "4"], " ", 
     RowBox[{"Cos", "[", 
      FractionBox[
       RowBox[{"2", " ", "\[Pi]", " ", "t"}], "\[Tau]"], "]"}]}], "-", 
    RowBox[{"8", " ", "A", " ", "\[Pi]", " ", "\[Beta]", " ", 
     SqrtBox[
      RowBox[{
       RowBox[{
        RowBox[{"-", "4"}], " ", 
        SuperscriptBox["\[Pi]", "2"]}], "+", 
       SuperscriptBox["\[Beta]", "2"]}]], " ", 
     SuperscriptBox["\[Tau]", "3"], " ", 
     RowBox[{"Sin", "[", 
      FractionBox[
       RowBox[{"2", " ", "\[Pi]", " ", "t"}], "\[Tau]"], "]"}]}]}], ")"}], 
  "/", 
  RowBox[{"(", 
   RowBox[{"2", " ", 
    SqrtBox[
     RowBox[{
      RowBox[{
       RowBox[{"-", "4"}], " ", 
       SuperscriptBox["\[Pi]", "2"]}], "+", 
      SuperscriptBox["\[Beta]", "2"]}]], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "4"}], " ", 
       SuperscriptBox["\[Pi]", "2"]}], "+", 
      RowBox[{"4", " ", 
       SuperscriptBox["\[Pi]", "2"], " ", 
       SuperscriptBox["\[Tau]", "2"]}], "-", 
      RowBox[{"2", " ", 
       SuperscriptBox["\[Beta]", "2"], " ", 
       SuperscriptBox["\[Tau]", "2"]}], "+", 
      RowBox[{"2", " ", "\[Beta]", " ", 
       SqrtBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "4"}], " ", 
          SuperscriptBox["\[Pi]", "2"]}], "+", 
         SuperscriptBox["\[Beta]", "2"]}]], " ", 
       SuperscriptBox["\[Tau]", "2"]}]}], ")"}], " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"4", " ", 
       SuperscriptBox["\[Pi]", "2"]}], "-", 
      RowBox[{"4", " ", 
       SuperscriptBox["\[Pi]", "2"], " ", 
       SuperscriptBox["\[Tau]", "2"]}], "+", 
      RowBox[{"2", " ", 
       SuperscriptBox["\[Beta]", "2"], " ", 
       SuperscriptBox["\[Tau]", "2"]}], "+", 
      RowBox[{"2", " ", "\[Beta]", " ", 
       SqrtBox[
        RowBox[{
         RowBox[{
          RowBox[{"-", "4"}], " ", 
          SuperscriptBox["\[Pi]", "2"]}], "+", 
         SuperscriptBox["\[Beta]", "2"]}]], " ", 
       SuperscriptBox["\[Tau]", "2"]}]}], ")"}]}], ")"}]}]], "Output",
 CellChangeTimes->{{3.714107747342077*^9, 3.7141077708047004`*^9}, 
   3.714110004166785*^9, 3.7141113043438625`*^9, 3.7141945844760723`*^9, 
   3.7141948466372423`*^9, 3.714199433159403*^9, 3.714199500807559*^9, 
   3.7142236910816855`*^9, 3.714223823985977*^9, 3.7143883769888644`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"1.", " ", 
   RowBox[{"a", "."}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7143880480314817`*^9, 3.7143880538928647`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"X", "[", "t", "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"A", "\[Rule]", "1"}], ",", 
      RowBox[{"\[Tau]", "\[Rule]", "1"}], ",", 
      RowBox[{"\[Beta]", "\[Rule]", "0.1"}]}], "}"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "20"}], "}"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"0", ",", "20"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"-", ".8"}], ",", ".8"}], "}"}]}], "}"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.714105644886664*^9, 3.714105678578365*^9}, {
   3.7141057502410145`*^9, 3.7141057640560427`*^9}, {3.714105803429686*^9, 
   3.7141058097851877`*^9}, {3.7141059656813517`*^9, 
   3.7141059845917425`*^9}, {3.7141060409864764`*^9, 3.714106134454986*^9}, {
   3.714106196238698*^9, 3.714106265029501*^9}, {3.7141064455542583`*^9, 
   3.7141065227436695`*^9}, {3.71410658918297*^9, 3.714106593948254*^9}, {
   3.714106843715294*^9, 3.7141068645890503`*^9}, {3.7141069032594986`*^9, 
   3.714107039629458*^9}, {3.7141070722624254`*^9, 3.7141070993525763`*^9}, {
   3.7141074389506226`*^9, 3.714107440947011*^9}, {3.714107504814249*^9, 
   3.7141076612483387`*^9}, {3.7141078159317083`*^9, 3.714107829785554*^9}, {
   3.714107992921501*^9, 3.7141080983926587`*^9}, {3.7141081285385027`*^9, 
   3.714108204310405*^9}, {3.7141082495744047`*^9, 3.7141082515087476`*^9}, {
   3.7141085385912485`*^9, 3.7141085430594144`*^9}, {3.714108756440387*^9, 
   3.7141087594544225`*^9}, {3.7141105770680485`*^9, 
   3.7141105977348557`*^9}, {3.7141994374684625`*^9, 
   3.7141994377126274`*^9}, {3.7141994816059537`*^9, 3.714199513692381*^9}, {
   3.7142238011556735`*^9, 3.7142238060151033`*^9}, 3.714389210629488*^9}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
/Akj5PUVe6tYkqH+J0761U8Yoy5P3KkTQ34n6ehSl/2EMG9Kv87TUeTOfY7c
Yplf8NxF+Ril+RtyZS3gyf7ZX6BmtTa5L8yHRDPVuXGo/QGd8qZ7h9pdQPWI
o+Ezoz9gTB85m8jiCf2W2/f/fvQHmqn/RhWd9QX+1v/G65P/wN6TWjNF1kHg
H3pa05P9L/z3/rtt1UYM7KpdlViU+wte41ud517GQeNKyvKt43/Bwrp42wxv
PDBeY0k5bvcX4FaoSqzoe3CTbmTd6PsLFxQbI1O+p4DkJecJi/m/QJvOK3z0
1Eco8dxZ0s86A4vK6azKcZ9g9YevdcHRGQjW2DXzTTAdwkTglJzBDJyW2Y30
eelw6OxvyVDbGeDyTtcOO5sBDzPOtj98PwO0rCkNTfcygXt0I2W0ZDO+U9Nt
4G8mZPCkvbjQOwM6B/QaFO5ngY7GdaOy2Rm4rvNVxn4iC37Zsx/czTILuimZ
D55cyoaXySVsMdtm4cilcK5/JBvk++9PsuIszFb18KWJ50A1i0Spk/4s+J6L
0739OAdMoeXN9INZSJd74z5SkwMUcQsFff/Ngsb18cRI9lwIpRHur42fhfgl
K0HWs7mwy/ToWn7RLIxp90bQv8iF6prbokmds1BRlc1wMyMXriu8hNDfs+Bo
XW623JkLS77p1z3o52DvDkampJlc8Pvb6WInMQdDUulBOrR5IKu7Gnfr8Bxc
/xIo1sGaByU5EhW6F+YgVvClqihbHqRUXGRxs5iD2vzzsTc3/f843qPb+2IO
fJiFHn2czQXPQX8Zyag5OFP5pqGzKxfEj+ae5MidA1/NsjPum/Xkve03o2ie
A4bE6V85brmgQ0f13+/JObhj9dz+tlYuTN6RSRmknAe3/Tu8gxly4Vnd6YYG
wXl4SKkfd7o4B/h3PvhVuHceKs5pSQWY5UCaXwhbyul5SLn6XM+WKQdOzhbu
Cr81Dx+y/Sxp4rNh+OK3c97O8zDNetjj0t5ssM/bYvM4ZB4kq3nj3fOzIMnp
fPalmnnQok26+yc5E44NP+pU/zYPMPP22X3eTOg9Frm4f2Ue7u/auHbpcQYw
0k8qce9YgBNdk7Ks29IhzpzFgFp9Ab4LjWUcvZ8Ghxv2PJkxWgChb6b66rc+
gXmAU3Gz3wK80wjMLDqaAlTzcUMkaQGmfssbPAhLhrBL1RSfyhYgNMCE220s
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
P2aoD6O2YuanskIGbLBzEO3dN4QkLq03Gy5hwCC5oCRizyAK5X7U2FTJgD59
yftHJftRy5Pml+o1BP4vxI0lv/aiVScKtpjUMaA7zLRhaUUPCn7rvyCimej3
mvqV6jpd6EGMQtWqAQbkdhc1fZltQXcNbI4IfWfA84Sh/PaleejZ8QHzc7ME
vhElz393ZKCSwwbOtX8Y8CFetvLt+qdoes/Bh4GLVODmCrcNlowIbK5I614j
rgIWu90kmxeUYY+tyaPua1TgcuHw1GHNShwmvfl39zoVyKkaeR/qVYNrV67a
HLtZBcQGItLamt9j9s9paxJNBdSlScNMxw58dOrCZX+GCuwqu3rlVU8nth8X
+I2yVGBO9vuPzN3dOG64KzVjpwos0pP5k8nrxW96jxet1FCB29ftv95R6Mdt
7e8aXJAK8DIX7PQyH8DL3hVNqmqrgNruxImM5CEsX7FtQeRhFcgtW7iXnzuM
95ZkSPzSVYFipY2ros042DhfQd7shAp0mBsrRnRy8KXseNVSfRW49XT0vAqh
z4LTpbRljFTgZ/O7WPZrLk5NDjW6baoCZ1686Lq4jocr45ef51uowCkvx6gi
Vx4eeuJz7YCVCsw8XzgyVsXDv8L+BKacVYEv2z8c7lnFx5JBl+OW26tAiPj0
Lxs9Pmbc/Zx54YIKiByO6nYm+ObwbduyRmcVKM0KvDNUSvCN13CripsKaFzO
tI/9wMc33I35D91VYJWjQ024sABHXWyd+eapApI6OoXFmwU497yOsKG3CiS1
CfYJ0QW42aZS6s1NFdjXs0rnHEuAP1loUKXvqIBOsEnqkLIALzbOU/f2V4HF
PjWyLrICLKPH0B26rwKbjrWf3yIqwOq6KRYQpALi3MKt05/5+JT21ovPQlXg
x/Tv5p81fHwRom4tfqwC0SuUR1AkHweorw6zjVSB7h1rXgydJvhQNTDpXTSx
324OJjbzcRljcZ5SvApsnfMO9e0g9B/les2DRBXIW2exr9aHh7/L/eieTFYB
oTjhjG4KD4tvvjh2IlUFGiW31Q/UcLGS1OjvnBcqIP16ueJCCy62FOnb7JGj
Ag9erJe1cePga0v0VXrziPxx6pSYYBiHzzfA7kLivIbjc3rnEK7/Vmozj1Ug
eY//labgAbx9IDHtbqMK2L0V/77UuRuLM+xns1pU4HxYd8chuS48cZNxsKdd
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
4Q0o2YY2DSPJDCo0yLPhg/tVKRE3DsqsmD5spcCG4BseB9x/cBDvi69FEIUN
+rTWabdxgv+Ej9nJKxH25/Vh/5nx0LrNUq6FNDaI1Rhzygm9lr2Nc+24MhvW
JDQ9j1HkIx2dNN8RBhu8Jv54it0m5rWlW7AXkw13FxQ1fmvnoxseu59IsNkw
9pYtxJARoPXBi5+lbGODs9gbl3hrAcpJbnyxZzsbzJe5uyrFE/qsOCKvXY0N
JmYzzkWtAvSh9Qw+v5MNKo88Pu36J0C3Ril187vY0PJmo1/k1hEkPT/VFr6b
DTGztcLVu0dQ7triAdoeNuwM49sUHBtBx+i+H8r3suFwTUu5rckIGtU8+tUI
2HBiWulak9kIumOy7vfnfWyw9q3Z9NlgBG1xGRby3U+sf3Z1qTo4gt74p4pJ
H2BDEdvDzYQ1gvTiXKWytdlwZ+/QqdzVI2jitbqs9iE2rPJ38eIQfOpfL0Qb
OMyGhM03PSZKBGgr972q2xE2RNc5LvrkJ0BFP8P3LjvKBt76uR+ftQXo1Moz
h+KPsUFEzO2w+AKCj0kUPdUTbHA9YTt34RUf3ds9ZVZ/kg3ciwFbZcz4SE6v
6JylPhv2L1bM0/nHQyX2dy7+OMWG68wrWauf8JDhTd2rDwzZMKX9kRdH46Gv
4WvvyBmz4RFHZWbtGy4iVaZEHDNjw6Y1obO3SjioiT6bPGDOhg2+4gdDdnCQ
Z8Sh1w6n2XBPsOb1GpNh1HB+rNnfisi/UKGLvGIQuYnTlmM7Npwrb6Ad/NyN
Nl3zkjp6ng3dIX4+hsFdqJrfoNDvQPSLnM2pUcVOtL7AUfOnExvoVmb3MqAN
YYtML5XLbDjyp+jDUt13yL527n6pO3F/hnf/KyBVo9Ws40+OeLCh7elngeH3
cmS7+Guu3TUi/l1sZS3hAiT6gjX59BYb5rZz3q7svIdNZ3MtxYPY8Cksq4B/
tAEvtl5yMT6YDa/31Pf+///nmQ0G1+mhbKhMM1UWvGnBC5/+iDr0iA09jKLd
mjntOH3ZwdSux2zYo7f63ClSJz7lFpl/NoINL9W3DEcFd+HUAzvbb0WxwWJA
LD/pcC/Wy7rHXRnDBpdpYyfrqD78Z33vl9hYNhg+2vDg8HA/PjZxVbTwKRuU
3n7wyDgyhGcN6qUPJhL9cD+lCLkO42dYmtr5jA0DVYX64Qc4+HtY8YGp52z4
+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
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{443.99999999999966`, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{0, 20}, {-0.8, 0.8}},
  PlotRangeClipping->True,
  PlotRangePadding->{{0, 0}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.714389215988931*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"    ", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "this", " ", "plot", " ", "is", " ", "for", " ", "the", " ", "resonance", 
     " ", "condition", " ", "when", " ", "\[Omega]"}], "=", 
    SubscriptBox["\[Omega]", "0"]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.714387967303748*^9, 3.714388013294693*^9}, 
   3.7143892196140385`*^9}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"1.", " ", 
    RowBox[{"b", "."}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.7143880657680035`*^9, 3.714388077285818*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"Manipulate", "[", 
   RowBox[{
    RowBox[{"Plot", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"X", "[", "t", "]"}], "/.", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"A", "\[Rule]", "1"}], ",", 
         RowBox[{"\[Tau]", "\[Rule]", "1"}], ",", 
         RowBox[{"\[Beta]", "\[Rule]", "damp"}]}], "}"}]}], ",", 
      RowBox[{"{", 
       RowBox[{"t", ",", "0", ",", "20"}], "}"}], ",", 
      RowBox[{"PlotRange", "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"0", ",", "20"}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"-", ".8"}], ",", ".8"}], "}"}]}], "}"}]}]}], "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"damp", ",", "0.1", ",", "10"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.7141071059671907`*^9, 3.7141072230407066`*^9}, 
   3.7141072873014283`*^9, {3.7141082381579466`*^9, 3.714108324828625*^9}, {
   3.7141084282338552`*^9, 3.7141084294807396`*^9}, {3.7141084600381365`*^9, 
   3.7141084849392757`*^9}, {3.71410872481816*^9, 3.714108746209135*^9}, {
   3.7141089652111034`*^9, 3.714108965377221*^9}, {3.7141090548597703`*^9, 
   3.7141090554781885`*^9}, {3.7141100127438912`*^9, 3.714110052125841*^9}, {
   3.7141101014042206`*^9, 3.7141101182474604`*^9}, {3.7141101962881937`*^9, 
   3.714110363962008*^9}, {3.714110618178564*^9, 3.714110628206663*^9}, {
   3.7141107231618195`*^9, 3.714110752335707*^9}, {3.714224011790479*^9, 
   3.714224045339162*^9}, {3.71422407771819*^9, 3.714224115519436*^9}, {
   3.7143884456980257`*^9, 3.7143884469792905`*^9}, {3.714388488999345*^9, 
   3.714388513392138*^9}, {3.7143907114947696`*^9, 3.7143907360140104`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`damp$$ = 0.51, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`damp$$], 0.1, 10}}, Typeset`size$$ = {
    493., {138., 145.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`damp$15414$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`damp$$ = 0.1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`damp$$, $CellContext`damp$15414$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        ReplaceAll[
         $CellContext`X[$CellContext`t], {$CellContext`A -> 
          1, $CellContext`\[Tau] -> 1, $CellContext`\[Omega] -> 
          2 Pi, $CellContext`\[Beta] -> $CellContext`damp$$}], \
{$CellContext`t, 0, 20}, PlotRange -> {{0, 20}, {-0.8, 0.8}}], 
      "Specifications" :> {{$CellContext`damp$$, 0.1, 10}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{554., {192., 199.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.7141100527943134`*^9, 3.714110120869291*^9, {3.71411031725628*^9, 
   3.7141103655471296`*^9}, 3.714110630282151*^9, {3.7141107261709514`*^9, 
   3.7141107530261717`*^9}, 3.7141945483932*^9, 3.7142240516691895`*^9, 
   3.714224117175704*^9, {3.7143884689029393`*^9, 3.7143885152359085`*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "if", " ", "there", " ", "were", " ", "no", " ", "driving", " ", "force", 
    " ", "to", " ", "sustain", " ", "oscillations"}], ",", " ", 
   RowBox[{
    RowBox[{"then", " ", "for", " ", "\[Beta]"}], ">", 
    RowBox[{
     SubscriptBox["\[Omega]", 
      RowBox[{"0", " "}]], "there", " ", "would", " ", "be", " ", "no", " ", 
     "oscillations"}]}], ",", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"i", ".", "e", ".", " ", "for"}], " ", "\[Beta]"}], ">", 
    RowBox[{"2", "\[Pi]"}]}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.714388343844079*^9, 3.714388462277867*^9}}],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{"(*", " ", 
   RowBox[{"1.", " ", 
    RowBox[{"c", "."}]}], " ", "*)"}]}]], "Input",
 CellChangeTimes->{{3.714110052846366*^9, 3.714110059612173*^9}, {
  3.7143881172907095`*^9, 3.714388125728222*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"X", "[", "t", "]"}], "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"A", "\[Rule]", "1"}], ",", 
        RowBox[{"\[Tau]", "\[Rule]", "ftime"}], ",", 
        RowBox[{"\[Beta]", "\[Rule]", "0.1"}]}], "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "20"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"ftime", ",", "0.1", ",", "5"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.714224153507907*^9, 3.714224170117402*^9}, {
  3.7142242063095703`*^9, 3.71422420724708*^9}, {3.714390638722534*^9, 
  3.7143906396511927`*^9}, {3.7143907479774895`*^9, 3.7143907503300304`*^9}, {
  3.714390826083398*^9, 3.7143908290755143`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`ftime$$ = 3.3600000000000003`, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`ftime$$], 0.1, 5}}, Typeset`size$$ = {
    450., {130., 136.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`ftime$18310$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, "Variables" :> {$CellContext`ftime$$ = 0.1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`ftime$$, $CellContext`ftime$18310$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        ReplaceAll[
         $CellContext`X[$CellContext`t], {$CellContext`A -> 
          1, $CellContext`\[Tau] -> $CellContext`ftime$$, $CellContext`\
\[Omega] -> 2 Pi, $CellContext`\[Beta] -> 0.1}], {$CellContext`t, 0, 20}], 
      "Specifications" :> {{$CellContext`ftime$$, 0.1, 5}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{511., {184., 191.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.714224188698144*^9, 3.714224208106482*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"value", " ", "of", " ", "\[Tau]", " ", "at", " ", "resonance"}], 
   " ", "=", " ", "1"}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7143883059490557`*^9, 3.7143883293107295`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.714111246620059*^9, 3.7141112858107557`*^9}, 
   3.714112005030899*^9}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"1.", " ", 
   RowBox[{"d", "."}]}], " ", "*)"}]], "Input",
 CellChangeTimes->{{3.7143881362142153`*^9, 3.714388142854888*^9}}],

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", "=", 
       RowBox[{"NDSolve", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"v", "[", "t", "]"}], "\[Equal]", 
            RowBox[{
             RowBox[{"x", "'"}], "[", "t", "]"}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"v", "'"}], "[", "t", "]"}], "+", 
             RowBox[{"2", "*", "\[Beta]", "*", 
              RowBox[{"v", "[", "t", "]"}]}], "+", 
             RowBox[{
              SubsuperscriptBox["\[Omega]", "0", "2"], " ", "*", 
              RowBox[{"x", "[", "t", "]"}]}]}], "\[Equal]", 
            RowBox[{"A", "*", 
             RowBox[{"Cos", "[", 
              RowBox[{"\[Omega]", "*", "t"}], "]"}]}]}], ",", 
           "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"x", "[", "0", "]"}], "\[Equal]", 
            RowBox[{"p", "[", 
             RowBox[{"[", "1", "]"}], "]"}]}], ",", 
           RowBox[{
            RowBox[{"v", "[", "0", "]"}], "\[Equal]", 
            RowBox[{"p", "[", 
             RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"v", "[", "t", "]"}]}], "}"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "0", ",", "time"}], "}"}]}], "]"}]}], "}"}], ",", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"Evaluate", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"v", "[", "t", "]"}]}], "}"}], "/.", "y"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "time"}], "}"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "7"}], ",", "7"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "7"}], ",", "7"}], "}"}]}], "}"}]}]}], "]"}]}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", ",", 
       RowBox[{"{", 
        RowBox[{"0", ",", "0"}], "}"}]}], "}"}], ",", "Locator"}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"time", ",", "10"}], "}"}], ",", "0", ",", "100"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Omega]", ",", 
     RowBox[{"Pi", "/", "4"}], ",", 
     RowBox[{"4", "Pi"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"A", ",", "0.5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     SubscriptBox["\[Omega]", "0"], ",", "Pi", ",", 
     RowBox[{"3", "Pi"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Beta]", ",", "0.1", ",", "2"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7141110169834404`*^9, 3.7141110215335674`*^9}, {
   3.714111119581421*^9, 3.7141111541364937`*^9}, {3.714111207734942*^9, 
   3.7141112235944815`*^9}, {3.714111342857402*^9, 3.714111348782222*^9}, {
   3.714111617073265*^9, 3.7141116183501673`*^9}, {3.7141119371891975`*^9, 
   3.714111987212062*^9}, {3.7141120337714057`*^9, 3.7141120796605606`*^9}, {
   3.714112113467616*^9, 3.7141121731985946`*^9}, {3.7141122637326164`*^9, 
   3.7141123366553664`*^9}, {3.7141124155839434`*^9, 
   3.7141125032784142`*^9}, {3.714112537827999*^9, 3.714112550760355*^9}, {
   3.714112591181394*^9, 3.714112634137572*^9}, {3.7141126753299837`*^9, 
   3.7141127724521694`*^9}, {3.714112804092286*^9, 3.714112872756264*^9}, {
   3.7141130101975956`*^9, 3.714113051568056*^9}, {3.7141133014416027`*^9, 
   3.7141133309004693`*^9}, {3.7141134193972573`*^9, 3.714113483386712*^9}, {
   3.71411424965497*^9, 3.7141142509248714`*^9}, {3.7143888052580376`*^9, 
   3.714388858108473*^9}, 3.7143891741092925`*^9, {3.714389240787801*^9, 
   3.714389249195958*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`A$$ = 
    1.3250000000000002`, $CellContext`p$$ = {0.0600000000000005, 
    0.040000000000000036`}, $CellContext`time$$ = 
    27.200000000000003`, $CellContext`\[Beta]$$ = 
    0.1, $CellContext`\[Omega]$$ = Pi, $CellContext`$3037$$ = Pi, 
    Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
    Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, Typeset`animvar$$ = 
    1, Typeset`name$$ = "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`p$$], {0, 0}}, Automatic}, {{
       Hold[$CellContext`time$$], 10}, 0, 100}, {
      Hold[$CellContext`\[Omega]$$], Rational[1, 4] Pi, 4 Pi}, {
      Hold[$CellContext`A$$], 0.5, 5}, {{
       Hold[$CellContext`$3037$$], Pi, 
       RawBoxes[
        SubscriptBox["\[Omega]", "0"]]}, Pi, 3 Pi}, {
      Hold[$CellContext`\[Beta]$$], 0.1, 2}}, Typeset`size$$ = {
    450., {222., 228.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`time$280095$$ = 
    0, $CellContext`\[Omega]$280096$$ = 0, $CellContext`A$280097$$ = 
    0, $CellContext`$3037$280098$$ = 0, $CellContext`\[Beta]$280099$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`A$$ = 
        0.5, $CellContext`p$$ = {0, 0}, $CellContext`time$$ = 
        10, $CellContext`\[Beta]$$ = 0.1, $CellContext`\[Omega]$$ = 
        Rational[1, 4] Pi, $CellContext`$3037$$ = Pi}, "ControllerVariables" :> {
        Hold[$CellContext`time$$, $CellContext`time$280095$$, 0], 
        Hold[$CellContext`\[Omega]$$, $CellContext`\[Omega]$280096$$, 0], 
        Hold[$CellContext`A$$, $CellContext`A$280097$$, 0], 
        Hold[$CellContext`$3037$$, $CellContext`$3037$280098$$, 0], 
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$280099$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`y$ = 
         NDSolve[{$CellContext`v[$CellContext`t] == 
            Derivative[1][$CellContext`x][$CellContext`t], 
            Derivative[
              1][$CellContext`v][$CellContext`t] + (
               2 $CellContext`\[Beta]$$) $CellContext`v[$CellContext`t] + \
$CellContext`$3037$$^2 $CellContext`x[$CellContext`t] == $CellContext`A$$ 
             Cos[$CellContext`\[Omega]$$ $CellContext`t], $CellContext`x[0] == 
            Part[$CellContext`p$$, 1], $CellContext`v[0] == 
            Part[$CellContext`p$$, 2]}, {
            $CellContext`x[$CellContext`t], 
            $CellContext`v[$CellContext`t]}, {$CellContext`t, 
            0, $CellContext`time$$}]}, 
        ParametricPlot[
         Evaluate[
          ReplaceAll[{
            $CellContext`x[$CellContext`t], 
            $CellContext`v[$CellContext`t]}, $CellContext`y$]], \
{$CellContext`t, 0, $CellContext`time$$}, PlotRange -> {{-7, 7}, {-7, 7}}]], 
      "Specifications" :> {{{$CellContext`p$$, {0, 0}}, Automatic, 
         ControlType -> Locator}, {{$CellContext`time$$, 10}, 0, 
         100}, {$CellContext`\[Omega]$$, Rational[1, 4] Pi, 4 
         Pi}, {$CellContext`A$$, 0.5, 5}, {{$CellContext`$3037$$, Pi, 
          RawBoxes[
           SubscriptBox["\[Omega]", "0"]]}, Pi, 3 
         Pi}, {$CellContext`\[Beta]$$, 0.1, 2}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{519., {338., 345.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Input",
 CellChangeTimes->{{3.714388152935136*^9, 3.714388253475955*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"at", " ", "resonance"}], ",", " ", 
    RowBox[{
    "the", " ", "phase", " ", "space", " ", "orbit", " ", "eventually", " ", 
     "spirals", " ", "from", " ", "its", " ", "initial", " ", "position", " ",
      "into", " ", "an", " ", "ellipse", " ", "like", " ", "that", " ", "of", 
     " ", "an", " ", "undamped", " ", "regualar", " ", "harmonic", " ", 
     RowBox[{"oscillator", ".", " ", "the"}], " ", "x", " ", "intercept", " ",
      "is", " ", "the", " ", "resonant", " ", "amplitude"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"for", " ", 
     RowBox[{
      SubscriptBox["\[Omega]", "0"], "/", "\[Omega]"}], " ", "being", " ", 
     "a", " ", "rational", " ", 
     RowBox[{"no", ".", " ", "other"}], " ", "than", " ", "1"}], ",", " ", 
    RowBox[{
    "then", " ", "for", " ", "a", " ", "particular", " ", "intiial", " ", 
     "condition", " ", "it", " ", "comes", " ", "out", " ", "to", " ", "be", 
     " ", "an", " ", 
     RowBox[{"ellipse", ".", " ", "for"}], " ", "other", " ", "values", " ", 
     "it", " ", "is", " ", "a", " ", "somewhat", " ", "haphazard", " ", 
     "plot"}]}], "*)"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7143882607416677`*^9, 3.7143882646635804`*^9}, {
  3.7143885515688257`*^9, 3.7143886695033445`*^9}, {3.714390201494825*^9, 
  3.714390362155363*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.714115663532829*^9, 3.7141156662787485`*^9}, {
  3.7141174745572357`*^9, 3.7141174755079365`*^9}}],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{"2.", " ", "Humped", " ", "Potential", " ", "Well"}], " ", 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7141946349754105`*^9, 3.714194679526992*^9}, {
  3.7143906063625813`*^9, 3.7143906185252004`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"soln2", "=", 
  RowBox[{
   RowBox[{"Evaluate", "@", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"NDSolve", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"m", "*", 
             RowBox[{
              RowBox[{"x", "''"}], "[", "t", "]"}]}], "\[Equal]", 
            RowBox[{
             RowBox[{"a", "*", 
              SuperscriptBox[
               RowBox[{"(", 
                RowBox[{"x", "[", "t", "]"}], ")"}], "2"]}], "-", 
             RowBox[{"b", "*", 
              RowBox[{"x", "[", "t", "]"}]}]}]}], ",", 
           RowBox[{
            RowBox[{"x", "[", "0", "]"}], "\[Equal]", 
            SubscriptBox["s", "0"]}], ",", 
           RowBox[{
            RowBox[{
             RowBox[{"x", "'"}], "[", "0", "]"}], "\[Equal]", "0"}]}], "}"}], 
         ",", 
         RowBox[{"x", "[", "t", "]"}], ",", 
         RowBox[{"{", 
          RowBox[{"t", ",", "0", ",", "30"}], "}"}]}], "]"}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        SubscriptBox["s", "0"], ",", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"-", "0.9999"}], 
           FractionBox["b", 
            RowBox[{"2", "a"}]]}], ",", 
          RowBox[{
           RowBox[{"-", ".0001"}], 
           FractionBox["b", 
            RowBox[{"2", "a"}]]}], ",", 
          RowBox[{".0001", 
           FractionBox["b", 
            RowBox[{"2", "a"}]]}], ",", 
          RowBox[{".9999", 
           FractionBox["b", 
            RowBox[{"2", "a"}]]}]}], "}"}]}], "}"}]}], "]"}]}], "/.", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"m", "\[Rule]", "1"}], ",", 
     RowBox[{"a", "\[Rule]", "1"}], ",", 
     RowBox[{"b", "\[Rule]", "4"}]}], "}"}]}]}]], "Input",
 CellChangeTimes->{{3.7141946351941605`*^9, 3.714194638834814*^9}, {
  3.7141947472819195`*^9, 3.714194789346731*^9}, {3.7141948657468333`*^9, 
  3.7141950726493883`*^9}, {3.714195110892972*^9, 3.7141951375027275`*^9}, {
  3.7141952078362913`*^9, 3.714195355697941*^9}, {3.714195389128048*^9, 
  3.7141954201859217`*^9}, {3.7141955325797243`*^9, 3.7141955598660417`*^9}, {
  3.7141956822697716`*^9, 3.714195683290495*^9}, {3.7141957202804985`*^9, 
  3.714195734035245*^9}, {3.7141958861750393`*^9, 3.7141960377351093`*^9}, {
  3.7141960887972765`*^9, 3.714196163255249*^9}, {3.7141964198389826`*^9, 
  3.7141965140333166`*^9}, {3.7141966136519012`*^9, 3.7141966964397693`*^9}, {
  3.7141967808537407`*^9, 3.7141967969411364`*^9}, {3.7141968549586477`*^9, 
  3.7141968589855146`*^9}, {3.7141968976827335`*^9, 3.71419690048574*^9}, {
  3.714198549489131*^9, 3.7141985517037077`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
       RowBox[{
        TagBox[
         TemplateBox[{RowBox[{
             StyleBox[
              TagBox["InterpolatingFunction", "SummaryHead"], 
              "NonInterpretableSummary"], 
             StyleBox["[", "NonInterpretableSummary"], 
             DynamicModuleBox[{Typeset`open$$ = False}, 
              PanelBox[
               PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT4TgehILv//v1Iuok6l
TN8/tS+Ac4KE6L+dPILS0E7wP44K5KR+2fg/svFU4o46+D9KTxEoZosHQL9p
XTmG/v8/n6P57nuZDEBLkQoifjUEQLsdcpZQxQ5Avu/ib8QjCECQ+Vl05H8P
QJfukhdKZgxAQtr+kDO4D0B2524xdkoQQA7fQct6mQ9ApJhS+8w9EkCCxl5G
bxIPQAUaInJDWxRAilmx6e1tDUBo3C+Nv1QWQNmTS+k4bAlAig8L+klEGEAQ
azUQ6IkAQN8S0hP0XRpALj47lwpYs782V9fRo1McQD/RcYGpzv2/wWvIPHNz
HkDP3zb39G/zv4R4w3yoRCBA5WIjkqlE8T+q20Etmj0hQIChfPa6XgVA6iY2
tJtLIkDet9m65f0LQKuSSQ2gRyNA9CwejUJzDkCG5tI8tFgkQH3bAda/bQ9A
wPJClc9kJUDMQ+dxdLUPQHsf0r/tXiZAzAoirWuoD0BQNNfAG24nQPAkp4Ua
Mw9Apmn7k0xrKEC2PbApde8NQFtXBpCEYylArpApg/PDCkAqLYdizHAqQBTI
o4BMeQJAeiMnBxdsK0Du2RjuiMTcP+QBPYJxfCxAmQhDKX9R+7+tmDkm04ct
QOKdcUEZ9/e/909VnDeBLkAy2tLpzX3iP1vv5uirjy9A2RZhc6jqA0Cg18uD
EUYwQABNH7P6FAtAwpOXp9DBMEC8bRMU3w4OQPFDnrYXSDFA+arF6RlJD0Bh
hLQuYMUxQAJmwwuAqg9A3bgFkjBNMkDLhVrCBrIPQJp9Zl4CzDJAkVoQfmNk
D0CHnjq/V0gzQNTDcDKOfA5AgLNJCzXPM0Bc9pk/OtELQLpYaMATTTRA6g+O
viGeBUAB8sFgetU0QGztG4WYB+4/d+eOlWRbNUAdTMUWO3z1vy5tazNQ2DVA
83Jbw9wH/r/y5oK8w182QAxUbOgjaLE/9/CprjjeNkB2smCL5YkAQCtXRDUx
WjdAiczK3EJtCUBssRmnseA3QLim8oOKlQ1A7pv+gTNeOED4RKH2hg8PQH16
Hkg95jhASS9/L6ieD0A7tbGiyms5QPmLJKU/tw9AOoBUZlnoOUAn/L9StoEP
QEY/MhVwbzpAswms/yq0DkCSjh8tiO06QMoja+INpAxA69FHMCh2O0CUpF9w
z+AGQHRx48dL/DtABJfwvKBt9D89oY7IcHk8QKBadCuXjey/E8V0tB0BPUAY
WRDxcoX/vyp5agnMfz1AF+qtYLpc279KHnj3//89QApHWYB1m/s/tSWw9A==

                    "]]}}}, {}, {}}, {
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0, 0}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0., 30.}, {-1.9997999999978375`, 
                    3.9649421050810654`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "30.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                   False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT4TgehILv//v1Iuok6l
TN8/tS+Ac4KE6L+dPILS0E7wP44K5KR+2fg/svFU4o46+D9KTxEoZosHQL9p
XTmG/v8/n6P57nuZDEBLkQoifjUEQLsdcpZQxQ5Avu/ib8QjCECQ+Vl05H8P
QJfukhdKZgxAQtr+kDO4D0B2524xdkoQQA7fQct6mQ9ApJhS+8w9EkCCxl5G
bxIPQAUaInJDWxRAilmx6e1tDUBo3C+Nv1QWQNmTS+k4bAlAig8L+klEGEAQ
azUQ6IkAQN8S0hP0XRpALj47lwpYs782V9fRo1McQD/RcYGpzv2/wWvIPHNz
HkDP3zb39G/zv4R4w3yoRCBA5WIjkqlE8T+q20Etmj0hQIChfPa6XgVA6iY2
tJtLIkDet9m65f0LQKuSSQ2gRyNA9CwejUJzDkCG5tI8tFgkQH3bAda/bQ9A
wPJClc9kJUDMQ+dxdLUPQHsf0r/tXiZAzAoirWuoD0BQNNfAG24nQPAkp4Ua
Mw9Apmn7k0xrKEC2PbApde8NQFtXBpCEYylArpApg/PDCkAqLYdizHAqQBTI
o4BMeQJAeiMnBxdsK0Du2RjuiMTcP+QBPYJxfCxAmQhDKX9R+7+tmDkm04ct
QOKdcUEZ9/e/909VnDeBLkAy2tLpzX3iP1vv5uirjy9A2RZhc6jqA0Cg18uD
EUYwQABNH7P6FAtAwpOXp9DBMEC8bRMU3w4OQPFDnrYXSDFA+arF6RlJD0Bh
hLQuYMUxQAJmwwuAqg9A3bgFkjBNMkDLhVrCBrIPQJp9Zl4CzDJAkVoQfmNk
D0CHnjq/V0gzQNTDcDKOfA5AgLNJCzXPM0Bc9pk/OtELQLpYaMATTTRA6g+O
viGeBUAB8sFgetU0QGztG4WYB+4/d+eOlWRbNUAdTMUWO3z1vy5tazNQ2DVA
83Jbw9wH/r/y5oK8w182QAxUbOgjaLE/9/CprjjeNkB2smCL5YkAQCtXRDUx
WjdAiczK3EJtCUBssRmnseA3QLim8oOKlQ1A7pv+gTNeOED4RKH2hg8PQH16
Hkg95jhASS9/L6ieD0A7tbGiyms5QPmLJKU/tw9AOoBUZlnoOUAn/L9StoEP
QEY/MhVwbzpAswms/yq0DkCSjh8tiO06QMoja+INpAxA69FHMCh2O0CUpF9w
z+AGQHRx48dL/DtABJfwvKBt9D89oY7IcHk8QKBadCuXjey/E8V0tB0BPUAY
WRDxcoX/vyp5agnMfz1AF+qtYLpc279KHnj3//89QApHWYB1m/s/tSWw9A==

                    "]]}}}, {}, {}}, {
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0, 0}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0., 30.}, {-1.9997999999978375`, 
                    3.9649421050810654`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "30.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}]}, 
                Dynamic[Typeset`open$$], ImageSize -> Automatic], 
               BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
             StyleBox["]", "NonInterpretableSummary"]}]},
          "CopyTag",
          DisplayFunction->(#& ),
          
          InterpretationFunction->(
           "InterpolatingFunction[{{0., 30.}}, <>]"& )],
         False,
         Editable->False,
         SelectWithContents->True,
         Selectable->False], "[", "t", "]"}]}], "}"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
       RowBox[{
        TagBox[
         TemplateBox[{RowBox[{
             StyleBox[
              TagBox["InterpolatingFunction", "SummaryHead"], 
              "NonInterpretableSummary"], 
             StyleBox["[", "NonInterpretableSummary"], 
             DynamicModuleBox[{Typeset`open$$ = False}, 
              PanelBox[
               PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT4/NBzr4jYqv1Iuok6l
TN8/wL38O0NJHb+dPILS0E7wP16krih9pBc/svFU4o46+D9Hrs/E4AwqP79p
XTmG/v8/cpI5/qElIT9LkQoifjUEQMW3HzQSfRG/vu/ib8QjCEDCFNgIf2kp
v5fukhdKZgxAQ9W4l5fwIb92524xdkoQQBJXhRPrKQ4/pJhS+8w9EkAR2YbK
VwMpPwUaInJDWxRAq+3dAQscIz9o3C+Nv1QWQOTjnKnzxQG/ig8L+klEGECd
OD/foMsnv98S0hP0XRpAFIP960deJb82V9fRo1McQEy/B/hVU9Y+wWvIPHNz
HkCCTTne8jgnP4R4w3yoRCBAOOGBBAsyJj+q20Etmj0hQIgck5sumN8+6iY2
tJtLIkD04gKuyEkmv6uSSQ2gRyNAJOv4qOPOJ7+G5tI8tFgkQGZUetjJq+6+
wPJClc9kJUAGmnW2AqwlP3sf0r/tXiZARkUt5LZTKD9QNNfAG24nQIPHpJKL
b/s+pmn7k0xrKEC0hCq+aNAjv1tXBpCEYylAPpbq5JFWKb8qLYdizHAqQJWh
GITFKwu/eiMnBxdsK0ArpIfRZUIhP+QBPYJxfCxAATbSYGCbKT+tmDkm04ct
QOuoX7QlLxA/909VnDeBLkBNXVNnvQ8gv1vv5uirjy9A2mQUySbqKb+g18uD
EUYwQNQrv14NQRa/wpOXp9DBMEDFMwkL7GUaP/FDnrYXSDFARvWcIr0xKj9h
hLQuYMUxQP+KYzkl9Bw/3bgFkjBNMkAk1JxbPvsXv5p9Zl4CzDJAJ6TVElwM
Kr+Hnjq/V0gzQNC5x9vS8iC/gLNJCzXPM0Bqjm9jsvMRP7pYaMATTTRALj/s
RttzKT8B8sFgetU0QK48o49XtiE/d+eOlWRbNUCVhM2ByEsPvy5tazNQ2DVA
S2fRhl4VKb/y5oK8w182QGlBU//t2iK/9/CprjjeNkDcVCDmkC0DPytXRDUx
WjdAIWPj/+HtJz9ssRmnseA3QBKTjZ4LHiU/7pv+gTNeOEC4pa+ndLXhvn16
Hkg95jhAxE3WS+NkJ787tbGiyms5QPp+qRvf7iW/OoBUZlnoOUB36nwBPa3Q
vkY/MhVwbzpANzlZzs6EJj+Sjh8tiO06QKujWJN0kyc/69FHMCh2O0C9ijxH
4m/mPnRx48dL/DtAZMNUz17yJb89oY7IcHk8QDZDMH/2Fyi/E8V0tB0BPUDs
JRMiCdv2vip5agnMfz1Assi1rEQtJD9KHnj3//89QNq/1UDj6Sg/55ezAw==

                    "]]}}}, {}, {}}, {
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0, 0}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0., 30.}, {-0.00019999999999989641`, 
                    0.00019984658984554588`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "30.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT4/NBzr4jYqv1Iuok6l
TN8/wL38O0NJHb+dPILS0E7wP16krih9pBc/svFU4o46+D9Hrs/E4AwqP79p
XTmG/v8/cpI5/qElIT9LkQoifjUEQMW3HzQSfRG/vu/ib8QjCEDCFNgIf2kp
v5fukhdKZgxAQ9W4l5fwIb92524xdkoQQBJXhRPrKQ4/pJhS+8w9EkAR2YbK
VwMpPwUaInJDWxRAq+3dAQscIz9o3C+Nv1QWQOTjnKnzxQG/ig8L+klEGECd
OD/foMsnv98S0hP0XRpAFIP960deJb82V9fRo1McQEy/B/hVU9Y+wWvIPHNz
HkCCTTne8jgnP4R4w3yoRCBAOOGBBAsyJj+q20Etmj0hQIgck5sumN8+6iY2
tJtLIkD04gKuyEkmv6uSSQ2gRyNAJOv4qOPOJ7+G5tI8tFgkQGZUetjJq+6+
wPJClc9kJUAGmnW2AqwlP3sf0r/tXiZARkUt5LZTKD9QNNfAG24nQIPHpJKL
b/s+pmn7k0xrKEC0hCq+aNAjv1tXBpCEYylAPpbq5JFWKb8qLYdizHAqQJWh
GITFKwu/eiMnBxdsK0ArpIfRZUIhP+QBPYJxfCxAATbSYGCbKT+tmDkm04ct
QOuoX7QlLxA/909VnDeBLkBNXVNnvQ8gv1vv5uirjy9A2mQUySbqKb+g18uD
EUYwQNQrv14NQRa/wpOXp9DBMEDFMwkL7GUaP/FDnrYXSDFARvWcIr0xKj9h
hLQuYMUxQP+KYzkl9Bw/3bgFkjBNMkAk1JxbPvsXv5p9Zl4CzDJAJ6TVElwM
Kr+Hnjq/V0gzQNC5x9vS8iC/gLNJCzXPM0Bqjm9jsvMRP7pYaMATTTRALj/s
RttzKT8B8sFgetU0QK48o49XtiE/d+eOlWRbNUCVhM2ByEsPvy5tazNQ2DVA
S2fRhl4VKb/y5oK8w182QGlBU//t2iK/9/CprjjeNkDcVCDmkC0DPytXRDUx
WjdAIWPj/+HtJz9ssRmnseA3QBKTjZ4LHiU/7pv+gTNeOEC4pa+ndLXhvn16
Hkg95jhAxE3WS+NkJ787tbGiyms5QPp+qRvf7iW/OoBUZlnoOUB36nwBPa3Q
vkY/MhVwbzpANzlZzs6EJj+Sjh8tiO06QKujWJN0kyc/69FHMCh2O0C9ijxH
4m/mPnRx48dL/DtAZMNUz17yJb89oY7IcHk8QDZDMH/2Fyi/E8V0tB0BPUDs
JRMiCdv2vip5agnMfz1Assi1rEQtJD9KHnj3//89QNq/1UDj6Sg/55ezAw==

                    "]]}}}, {}, {}}, {
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0, 0}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0., 30.}, {-0.00019999999999989641`, 
                    0.00019984658984554588`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "30.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}]}, 
                Dynamic[Typeset`open$$], ImageSize -> Automatic], 
               BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
             StyleBox["]", "NonInterpretableSummary"]}]},
          "CopyTag",
          DisplayFunction->(#& ),
          
          InterpretationFunction->(
           "InterpolatingFunction[{{0., 30.}}, <>]"& )],
         False,
         Editable->False,
         SelectWithContents->True,
         Selectable->False], "[", "t", "]"}]}], "}"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
       RowBox[{
        TagBox[
         TemplateBox[{RowBox[{
             StyleBox[
              TagBox["InterpolatingFunction", "SummaryHead"], 
              "NonInterpretableSummary"], 
             StyleBox["[", "NonInterpretableSummary"], 
             DynamicModuleBox[{Typeset`open$$ = False}, 
              PanelBox[
               PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT4/NBzr4jYqP1Iuok6l
TN8//pmLqMRJHT+dPILS0E7wP+oVrK97oxe/svFU4o46+D8lVL4Fbgwqv79p
XTmG/v8/ClN1lSIlIb9LkQoifjUEQEtMajLEfRE/vu/ib8QjCEA22/hhhGkp
P5fukhdKZgxAM4zW5sjwIT92524xdkoQQL0QLnTwJw6/pJhS+8w9EkDYhZTb
4wIpvwUaInJDWxRAsxlNJY8bI79o3C+Nv1QWQJK8UhmMxwE/ig8L+klEGECc
2sJwsssnP98S0hP0XRpA2o0vCGpeJT82V9fRo1McQDCI3J7LRNa+wWvIPHNz
HkAa6MA1fjgnv4R4w3yoRCBApVn2o/0xJr+q20Etmj0hQMxTwU0BoN++6iY2
tJtLIkCnQARKQEomP6uSSQ2gRyNAEh3grp/QJz+G5tI8tFgkQJhwwGyeyu4+
wPJClc9kJUBeGsfzOawlv3sf0r/tXiZAW7TaxIFVKL9QNNfAG24nQKkWt96z
dPu+pmn7k0xrKEAwHn8wTtEjP1tXBpCEYylAxoHTMBxYKT8qLYdizHAqQGtQ
iak4Mgs/eiMnBxdsK0CMbPu86EEhv+QBPYJxfCxAsJToJW+cKb+tmDkm04ct
QFtDksNFMBC/909VnDeBLkC8LwZqlRAgP1vv5uirjy9AQi4AtJ3rKT+g18uD
EUYwQGCnqpvkQhY/wpOXp9DBMEBpRxKiUGQav/FDnrYXSDFAlaD4Yh0xKr9h
hLQuYMUxQIMiBgnY9Ry/3bgFkjBNMkD7B+ur3vcXP5p9Zl4CzDJAfllbxj4M
Kj+Hnjq/V0gzQKYJLsoh9SA/gLNJCzXPM0DGJM3AI+4Rv7pYaMATTTRAop8z
oTlzKb8B8sFgetU0QFW7HVtVuCG/d+eOlWRbNUAcP57m1kEPPy5tazNQ2DVA
rkuDfIoUKT/y5oK8w182QH7r6UyR3SI/9/CprjjeNkD8vtoaax0DvytXRDUx
WjdABqyT4aDrJ79ssRmnseA3QAyKOqLpHiW/7pv+gTNeOECcskhHZ5HhPn16
Hkg95jhAVq7QRE9jJz87tbGiyms5QJ/f1ft27yU/OoBUZlnoOUDjMrsPZAPR
PkY/MhVwbzpA7YVo81+CJr+Sjh8tiO06QGLb8lCEkye/69FHMCh2O0CBCL2X
4ZzmvnRx48dL/DtANPkLflrwJT89oY7IcHk8QI/f6jCRGSg/E8V0tB0BPUA6
LAWizv72Pip5agnMfz1AngU1J5wqJL9KHnj3//89QIuz2Uyp6yi/JjOt8g==

                    "]]}}}, {}, {}}, {
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0, 0}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0., 30.}, {-0.0001998279926607212, 
                    0.00019999999999989641`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "30.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT4/NBzr4jYqP1Iuok6l
TN8//pmLqMRJHT+dPILS0E7wP+oVrK97oxe/svFU4o46+D8lVL4Fbgwqv79p
XTmG/v8/ClN1lSIlIb9LkQoifjUEQEtMajLEfRE/vu/ib8QjCEA22/hhhGkp
P5fukhdKZgxAM4zW5sjwIT92524xdkoQQL0QLnTwJw6/pJhS+8w9EkDYhZTb
4wIpvwUaInJDWxRAsxlNJY8bI79o3C+Nv1QWQJK8UhmMxwE/ig8L+klEGECc
2sJwsssnP98S0hP0XRpA2o0vCGpeJT82V9fRo1McQDCI3J7LRNa+wWvIPHNz
HkAa6MA1fjgnv4R4w3yoRCBApVn2o/0xJr+q20Etmj0hQMxTwU0BoN++6iY2
tJtLIkCnQARKQEomP6uSSQ2gRyNAEh3grp/QJz+G5tI8tFgkQJhwwGyeyu4+
wPJClc9kJUBeGsfzOawlv3sf0r/tXiZAW7TaxIFVKL9QNNfAG24nQKkWt96z
dPu+pmn7k0xrKEAwHn8wTtEjP1tXBpCEYylAxoHTMBxYKT8qLYdizHAqQGtQ
iak4Mgs/eiMnBxdsK0CMbPu86EEhv+QBPYJxfCxAsJToJW+cKb+tmDkm04ct
QFtDksNFMBC/909VnDeBLkC8LwZqlRAgP1vv5uirjy9AQi4AtJ3rKT+g18uD
EUYwQGCnqpvkQhY/wpOXp9DBMEBpRxKiUGQav/FDnrYXSDFAlaD4Yh0xKr9h
hLQuYMUxQIMiBgnY9Ry/3bgFkjBNMkD7B+ur3vcXP5p9Zl4CzDJAfllbxj4M
Kj+Hnjq/V0gzQKYJLsoh9SA/gLNJCzXPM0DGJM3AI+4Rv7pYaMATTTRAop8z
oTlzKb8B8sFgetU0QFW7HVtVuCG/d+eOlWRbNUAcP57m1kEPPy5tazNQ2DVA
rkuDfIoUKT/y5oK8w182QH7r6UyR3SI/9/CprjjeNkD8vtoaax0DvytXRDUx
WjdABqyT4aDrJ79ssRmnseA3QAyKOqLpHiW/7pv+gTNeOECcskhHZ5HhPn16
Hkg95jhAVq7QRE9jJz87tbGiyms5QJ/f1ft27yU/OoBUZlnoOUDjMrsPZAPR
PkY/MhVwbzpA7YVo81+CJr+Sjh8tiO06QGLb8lCEkye/69FHMCh2O0CBCL2X
4ZzmvnRx48dL/DtANPkLflrwJT89oY7IcHk8QI/f6jCRGSg/E8V0tB0BPUA6
LAWizv72Pip5agnMfz1AngU1J5wqJL9KHnj3//89QIuz2Uyp6yi/JjOt8g==

                    "]]}}}, {}, {}}, {
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0, 0}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0., 30.}, {-0.0001998279926607212, 
                    0.00019999999999989641`}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "30.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}]}, 
                Dynamic[Typeset`open$$], ImageSize -> Automatic], 
               BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
             StyleBox["]", "NonInterpretableSummary"]}]},
          "CopyTag",
          DisplayFunction->(#& ),
          
          InterpretationFunction->(
           "InterpolatingFunction[{{0., 30.}}, <>]"& )],
         False,
         Editable->False,
         SelectWithContents->True,
         Selectable->False], "[", "t", "]"}]}], "}"}], "}"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"{", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"x", "[", "t", "]"}], "\[Rule]", 
       RowBox[{
        TagBox[
         TemplateBox[{RowBox[{
             StyleBox[
              TagBox["InterpolatingFunction", "SummaryHead"], 
              "NonInterpretableSummary"], 
             StyleBox["[", "NonInterpretableSummary"], 
             DynamicModuleBox[{Typeset`open$$ = False}, 
              PanelBox[
               PaneSelectorBox[{False -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT7GnOhILv//P1Iuok6l
TN8/Uf6+VVhf+D+dPILS0E7wP8IG2jgclLA/svFU4o46+D90Xc28BaX0v79p
XTmG/v8/5H0iFffP8r9LkQoifjUEQANgekqKuNc/vu/ib8QjCEBDplh21gD6
P5fukhdKZgxAOXJpaZSu/z92524xdkoQQPtPEL2mvfM/pJhS+8w9EkBAYOYD
5mDNvwUaInJDWxRAmNA58xLx9r9o3C+Nv1QWQAaR8H+9j+u/ig8L+klEGEDA
BHJ0Is7kP98S0hP0XRpAZ74cf6ft/D82V9fRo1McQFZqiiRF9f4/wWvIPHNz
HkDvKScTKBXwP4R4w3yoRCBAEazEFdSu47+q20Etmj0hQNsKmg/Ya/e/6iY2
tJtLIkCfN683IPbgv6uSSQ2gRyNAL58E3aII8D+G5tI8tFgkQKoIU1Ww+P4/
wPJClc9kJUAOS3tHGzP8P3sf0r/tXiZATLNSC4735D9QNNfAG24nQCIJFFfD
Oe+/pmn7k0xrKECThz/HPVL2v1tXBpCEYylALfCejLv7zL8qLYdizHAqQKNz
ku/tNvU/eiMnBxdsK0Bd64GA/rn/P+QBPYJxfCxApm8Hn+XQ+T+tmDkm04ct
QJSa6JYt/M8/909VnDeBLkBRj/AefsHyv1vv5uirjy9APaRZc5N/87+g18uD
EUYwQERMG1jsnMg/wpOXp9DBMEDXRLbRfyL4P/FDnrYXSDFAwpSmedT4/z9h
hLQuYMUxQGheACQJevc/3bgFkjBNMkAUSFKuFgSdv5p9Zl4CzDJAKC0NCcZW
9b+Hnjq/V0gzQM1hqdz61PG/gLNJCzXPM0As76Gu2bLdP7pYaMATTTRAEFIS
wC/M+j8B8sFgetU0QLwCTtEPdv8/d+eOlWRbNUD+aWHtbYnyPy5tazNQ2DVA
XRccdowJ1b/y5oK8w182QL91zqyZOfe/9/CprjjeNkDGgGKlAMfovytXRDUx
WjdAZYc+wXfa5z9ssRmnseA3QB9DZg5OiP0/7pv+gTNeOEA1XWvEnoz+P316
Hkg95jhA09BkfulF7T87tbGiyms5QM+VTX7g0Oa/OoBUZlnoOUDfbMJWpWD3
v0Y/MhVwbzpAqlMlKnku27+Sjh8tiO06QC1WpwhCfPE/69FHMCh2O0DnxYL/
L1T/P3Rx48dL/DtA2N1tGfxk+z89oY7IcHk8QK5twYFTheE/E8V0tB0BPUDa
NUgfYvvwvyp5agnMfz1ArnGKVKmm9b9KHnj3//89QMMw/dQNma2/h4TRqw==

                    "]]}}}, {}, {}}, {
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0, 0}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0., 30.}, {-1.4638290986483102`, 
                    1.999799999999412}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "30.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}], True -> GridBox[{{
                    PaneBox[
                    ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                    Alignment -> {Center, Center}, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    GraphicsBox[{{{{}, {}, {
                    Directive[
                    Opacity[1.], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1]], 
                    LineBox[CompressedData["
1:eJwB0QMu/CFib1JlAgAAADwAAAACAAAA9xwHa8MPoT7GnOhILv//P1Iuok6l
TN8/Uf6+VVhf+D+dPILS0E7wP8IG2jgclLA/svFU4o46+D90Xc28BaX0v79p
XTmG/v8/5H0iFffP8r9LkQoifjUEQANgekqKuNc/vu/ib8QjCEBDplh21gD6
P5fukhdKZgxAOXJpaZSu/z92524xdkoQQPtPEL2mvfM/pJhS+8w9EkBAYOYD
5mDNvwUaInJDWxRAmNA58xLx9r9o3C+Nv1QWQAaR8H+9j+u/ig8L+klEGEDA
BHJ0Is7kP98S0hP0XRpAZ74cf6ft/D82V9fRo1McQFZqiiRF9f4/wWvIPHNz
HkDvKScTKBXwP4R4w3yoRCBAEazEFdSu47+q20Etmj0hQNsKmg/Ya/e/6iY2
tJtLIkCfN683IPbgv6uSSQ2gRyNAL58E3aII8D+G5tI8tFgkQKoIU1Ww+P4/
wPJClc9kJUAOS3tHGzP8P3sf0r/tXiZATLNSC4735D9QNNfAG24nQCIJFFfD
Oe+/pmn7k0xrKECThz/HPVL2v1tXBpCEYylALfCejLv7zL8qLYdizHAqQKNz
ku/tNvU/eiMnBxdsK0Bd64GA/rn/P+QBPYJxfCxApm8Hn+XQ+T+tmDkm04ct
QJSa6JYt/M8/909VnDeBLkBRj/AefsHyv1vv5uirjy9APaRZc5N/87+g18uD
EUYwQERMG1jsnMg/wpOXp9DBMEDXRLbRfyL4P/FDnrYXSDFAwpSmedT4/z9h
hLQuYMUxQGheACQJevc/3bgFkjBNMkAUSFKuFgSdv5p9Zl4CzDJAKC0NCcZW
9b+Hnjq/V0gzQM1hqdz61PG/gLNJCzXPM0As76Gu2bLdP7pYaMATTTRAEFIS
wC/M+j8B8sFgetU0QLwCTtEPdv8/d+eOlWRbNUD+aWHtbYnyPy5tazNQ2DVA
XRccdowJ1b/y5oK8w182QL91zqyZOfe/9/CprjjeNkDGgGKlAMfovytXRDUx
WjdAZYc+wXfa5z9ssRmnseA3QB9DZg5OiP0/7pv+gTNeOEA1XWvEnoz+P316
Hkg95jhA09BkfulF7T87tbGiyms5QM+VTX7g0Oa/OoBUZlnoOUDfbMJWpWD3
v0Y/MhVwbzpAqlMlKnku27+Sjh8tiO06QC1WpwhCfPE/69FHMCh2O0DnxYL/
L1T/P3Rx48dL/DtA2N1tGfxk+z89oY7IcHk8QK5twYFTheE/E8V0tB0BPUDa
NUgfYvvwvyp5agnMfz1ArnGKVKmm9b9KHnj3//89QMMw/dQNma2/h4TRqw==

                    "]]}}}, {}, {}}, {
                    DisplayFunction -> Identity, 
                    Ticks -> {Automatic, Automatic}, AxesOrigin -> {0, 0}, 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, DisplayFunction -> Identity, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, PlotRangeClipping -> True, ImagePadding -> 
                    All, DisplayFunction -> Identity, AspectRatio -> 1, 
                    Axes -> {False, False}, AxesLabel -> {None, None}, 
                    AxesOrigin -> {0, 0}, DisplayFunction :> Identity, 
                    Frame -> {{True, True}, {True, True}}, 
                    FrameLabel -> {{None, None}, {None, None}}, FrameStyle -> 
                    Directive[
                    Opacity[0.5], 
                    Thickness[Tiny], 
                    RGBColor[0.368417, 0.506779, 0.709798]], 
                    FrameTicks -> {{None, None}, {None, None}}, 
                    GridLines -> {None, None}, GridLinesStyle -> Directive[
                    GrayLevel[0.5, 0.4]], ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}], 
                    Method -> {
                    "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
                    AbsolutePointSize[6], "ScalingFunctions" -> None, 
                    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& ), "CopiedValueFunction" -> ({
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 1, 
                    2][#]& )[
                    Part[#, 1]], 
                    (
                    Part[{{Identity, Identity}, {Identity, Identity}}, 2, 
                    2][#]& )[
                    Part[#, 2]]}& )}}, 
                    PlotRange -> {{0., 30.}, {-1.4638290986483102`, 
                    1.999799999999412}}, PlotRangeClipping -> True, 
                    PlotRangePadding -> {{
                    Scaled[0.1], 
                    Scaled[0.1]}, {
                    Scaled[0.1], 
                    Scaled[0.1]}}, Ticks -> {Automatic, Automatic}}], 
                    GridBox[{{
                    RowBox[{
                    TagBox["\"Domain: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"0.`", ",", "30.`"}], "}"}], "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Output: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"scalar\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Order: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["3", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Method: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["\"Hermite\"", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Periodic: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["False", "SummaryItem"]}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                    AutoDelete -> False, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                    BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                   GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> 
                   False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   BaselinePosition -> {1, 1}]}, 
                Dynamic[Typeset`open$$], ImageSize -> Automatic], 
               BaselinePosition -> Baseline], DynamicModuleValues :> {}], 
             StyleBox["]", "NonInterpretableSummary"]}]},
          "CopyTag",
          DisplayFunction->(#& ),
          
          InterpretationFunction->(
           "InterpolatingFunction[{{0., 30.}}, <>]"& )],
         False,
         Editable->False,
         SelectWithContents->True,
         Selectable->False], "[", "t", "]"}]}], "}"}], "}"}], "}"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.714196798011899*^9, 3.714196860578616*^9, 
  3.7141969018356795`*^9, 3.7141985540883904`*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Table", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"x", "[", "t", "]"}], "/.", 
      RowBox[{"soln2", "[", 
       RowBox[{"[", "n", "]"}], "]"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "0", ",", "30"}], "}"}], ",", 
     RowBox[{"PlotRange", "\[Rule]", "Full"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"n", ",", "1", ",", "4"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.714195517324028*^9, 3.714195576864083*^9}, {
  3.714196210635583*^9, 3.7141963301667805`*^9}, {3.7141967311706347`*^9, 
  3.7141967395395947`*^9}, {3.7141969397135177`*^9, 3.7141970098239408`*^9}}],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   GraphicsBox[{{{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
        "]]}}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImageMargins->0.,
    ImagePadding->All,
    ImageSize->{389.59999999999945`, Automatic},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
      AbsolutePointSize[6], "ScalingFunctions" -> None, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
           Part[#, 1]], 
          (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
           Part[#, 1]], 
          (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 30}, {-1.999799999996698, 3.9652514251890234`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
0VUCa4pYdxnHs749eG/IaiXoaHQxuK7PxNaWurMLoATxATscqQQTq95Puxhh
owSdKd9e7dNk4skVQlo8TkqwRaT5mLMcE7cGBz2JdlcCoeGrxrOCTHz3c/8m
wYNKIHw6wNN+lsCnrBx6z/spQbnsrNOO75zzwIOa42IhSoAGfpYrtxOYIa0t
ePmsEiwPKngkVxF4+eSNm1KXlGCpkm7ffJfAH/v4DZKvK8GG+P34aSyBH64P
eC5/Wwncv1xV9D5M4F2y9r9VHivBeNA8rwRBYMPQqjMZ1UpwhnfXehF+Aov0
M+S1GpXAWHDi3dteBq4o4kW0LiUoOhN4pCWegRPl/d/l9SvBZu2mZr7dDOwd
3ntQ+5cSDG0zlVQ0YGB524pEg2Ul8PIV1O1upePfxTTqYyFlEAh42590nY6f
KyZXrJRWhtzntHVGnPUc8N2335SqDKXvnF7bDdPw2zMUI2tbZZj5di5pzxAV
5w4lNTc5KQN9JOYt9z0qPr1leZeNhzLcNL3T/XQnFeuqdZ/b4q8MFspd6dFN
FM559XLHjhRlEJ70jdp8noytxv6F+A4og9TnmNqlKk18amMy89kvZYiXuZdk
6a6JH97R7ZaZVoZ/11PvWv/TwIpOniYVQiogGHP+WYm/Ov719MUMr54KPDbT
E5a3VMFXoxIDU0+qwP5VEfleJ2VxvxzN97m4Kvy2pNXuXZiuVTiG1RQUVOHj
kHjllP7fWrtm11eHNFUhkavpy6uG0dqykHidFYaqEPn85K6XQn21F/rGh3e4
qgKY2RmLivRasO9XHRy7qwq7x06+3/6LB50xd9yjbKwGhvl2vRv6FNBGj4yJ
1ZZqcPBjbrVSiyKSiBw562ynBk+OuPr5lyihWw3nchI91UDucemgc6gKempT
OSJwXg1Gko97hIyoo4gjguGUq2rguTQQzlWngdYnOElYpqsBI3o7vXCjJnr/
36hBeLEa8Nm3PlWW00LjruTgv11qML2GX1w7lYTKQ/wEpQbV4MOl6pw7UyR0
+lbNDb1RNdD4R3gaOpCR2BeXqkM86tAa62cQvUxG9IMXub4w1SG/pjpqyJqK
RuO6khaN1CH0Q2OW1RUqKs2nkVWQOghuzOk7+YmKLEfrrLdvU4dLdi/D7Q7T
kEfQ1IW2UHWws2gO+nKY8/xNsVQdPqcO9U9P1Zll09Gvp5cLBRPVoUy5SMn0
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
GvofAL3uKg==
        "]]}}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{408.0000000000017, Automatic},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
      AbsolutePointSize[6], "ScalingFunctions" -> None, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
           Part[#, 1]], 
          (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
           Part[#, 1]], 
          (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 30}, {-0.00019999999999984977`, 0.00020001983431618695`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1:eJwU2nc81d8bAHBkr6ysrLvv55r3GpFynkQDJRWhjBQVZYSERFIRhQhJVBQq
pKnIEZFUtL5mUUahkOz9u7+/vJ7XOZ/zOc8Z1/vhkjz8tnvy8fDw7Bbk4fn/
z8nON6+o8Xlm57RVfncbsdCXbMXQda3RSCfx4K+ThiwEK5o8FFsvoXcv73+X
57CQfIe0iJRFFlpPGu06pMVCx7bdaVnWehP12Vt+DKGy0N6Hb+8sXchHAiEi
CebKLGQjPxQxt/4eEmIcDWuQYKGsNecK5k7cRxYvR4KWLxFIeljh0kzLA3Ro
45m/csMEOptTED7FeYwOm8uc7Ggn0Pw2E8+JC0+RH7Onz6OWQEf5GraO9T9D
PLZNK0uKCNT/0Nl4dH0Fcpb+Z1aTQiBXz9+kkexKZGOy2eJGCIG8xSrPTJ6o
QhfMpJKsnAjUVbHVb7ylGpFpRe/45QmUuUJhf6DAK6TYoWSnPMpEO327HP9x
apHLnihrgQYmalD3N/974TUa35j2KyCYic4cN17lV16PjkVt6ZrbyETwkUdr
uP8NGkte1+ejyERPopNX/Fn/Dv2YqPsl9JCB/DucRH0C3qPeE15dqyMYSNOA
vDSQ3YhOkr9v2GfJQB+OOo2PnfiAxFzs95U20dEG6uC30ZZP6AfpssfbdzSU
t22rY6nvZ6RjfVvD8hwN8UY8+OQv8AW58dGHuhANVfwX9nqE8x/qPPA5MPMu
FbHPiZUOXWhBAvLC3U1HKEhlUCtmYP1XdCjSwU0yVwOFyScvFrR/RaumqkZ6
zDVQi/nE8YMB39DMEIrMrVZHl66+OPIruxOdGi0AHQM1FEPPv/vvxHeE7s28
dZxWRjMtqy7/belGGreu1xuvkENlHGH3fKIH2YqweTpUZNGxC60s1/AeJHhw
LCKOLIP+mYdWvVXrReeXX7QPZkqhwaLnv2979qGDnUPxbebC6OvpteYuY7/Q
7xyn0bsTw2aZnRIScpb96PjEy1//rv40czTpbGlI60f8O9W31Ed+Nftv+OQR
49UDKGmE5/zXzoeVjU5VGbKnBlFqoum62vHRyird9SNvJIdQPPNs998QEXzy
vOzzKPchtMraPkbnpBhe09cTs+rBEGKpRd3NPCWBn2XGKN+yH0ZashvupmIp
/ECgzjIqawRV3v/vSmu+HP50hLp15YpRRGr5veOghApmX014OLl2FD37We2p
M6yCk+rHFT95jSLXNpWdy96p4q2U2p7YslEUdGaL3umT6rih1TN0cvc/dEk4
0VXflYQJwcbOjzH/EO9DnZdXX5JwrL6RRVHRP3Qk7EaaPoWMN1wUXL5/6R+a
tvIfbvhOxjXr8/M+3hxDr00Cl9+woGK9iyUDU/VjaKru62PBFCrObn2qozYy
hmp+3riX0UXFx4/Ul3mbjiPFvj8vqYE0/PPph4WkveOIh2dhufRzGt7B12b+
9Nw4shka1pdcomGd9IF3y76MI58bNucop+k468eoNGuW+/xFCzV2NR2LaM06
bNOYQMdso96ZLNFxb5Xoj6zDE6j20/o9jEAG3i4mS6+5NIHWv759j/cOA2P7
lT4DZRNoUbpNqrqTgTMHNScMBSZRD2+uyo91TCxsaLB6j+YkOvYpzNnIn4mD
I9dERttNovjDIVOuWUzc/cbiVUHIJDrUt0d+Vx0Tb5PbItJ0bRLNvf5jvXKY
iV+42m+dqJlEEcEFqQWyBGYVuqSsHJxE7Qo9E3NGBBYw81U9aDSFsjaryAwc
I/DR2GMeF/dMoVZv9bkTKQT+/ulk/qPoKbTIbjvytojAW1TP/WkvmEJ37v/X
/LGWwM8PJLJ5m6ZQ0t7+lgsdBGY+SD/GmJhCen412xeGCXx5Pqd8y8ppdGL2
YqAaDwvzbSzgCVo3jS7sjSofkWRh/+T7lpkHplH1iQAx/5Us3NlRdr7qwjTS
PXLkWjaNha3pL5t+PpxGTXollWHaLFzm/0ZOon0a8QcWNi3TZ2F6+UcnfZ4Z
pBjWss3EiIVTBNqznegzKEWV0q+8ioV5tnX3RNrMoIQKK68CQxb2zRxk3j46
g6b1N777wWbhjt5/R95lzKDFL6XbXmuy8CbduQf/KmfQht0sTycKCz8JXTat
2DeDbHoqyjMUWZjySmwtEptFJd832pwVY+EkSbloT/YsOivX7USZJ/Cio8rr
+F2zSEii6nDAIIF9cqniDyJmUcH2hxpHmwncOqRl15o7i3RnFUwYVQTeYGyY
tvhmFnkz5oou5RP4UfTaDurfWSQ2NHP3SQKBSe8tNazl51BMgHrqZT8CX1TY
6hmwZg6NyNbMsbcReH6vw510D26c5HXvog6BD91zHXkRO4fSGKm5xaIEbp70
MugtnkPmlRUyl3uZuDQ+pFJvbg5J5B8n1SQzsVpz5LJdpHl08p+BuownEydo
xG6K2DiPoil+WkZGTOz1OOPTm5R5tCfq0pDEJwZW6Xr200NrASUmbS+O+EvH
PGMBGW/sFpDpnZjzOo+4512QZaUXsoAaTyU6jwTTcZFOZtHCywV0wNVxw5Mx
GjY7GRaUsWsRKYbrLo21UjH5Eoe+dGIRWQXLn8EXqFjw9mCL581F5B78/Mgb
oOLG986m+kOL6FxXU+HDGxTspmrK1xi9hMqj2zrybcnYgj320KBgCdl9uv2J
NUXCTMu7nlffLyGrY7PT1GskfPzJhf0G4jzwMvhJUVavBobOhde8u3hAWvqA
0t9XavijdufFrD88cNV3zeeH5or41arnv2yXeGD2nWqw60EF/GRdGiyT4YXP
TEdbkQR5nGm/9d+hVbxw8Ktf1533ctgjotJ+VTQvnPzuZbZqjTT+9y5b5ZMC
H9BvDm6IKlmG5Q673RFavwxU5ngd+29OmLGEcuu27VoGBiveGObXzJjBzZ/d
V3yWQYGZ0HTTjwWzw61HVmqlLoObk2t/7xZdhl5ZnEjY1rcMDg54uhRRxVCQ
6hXfK+f4YbvA2YP/7V+Bzpd9Pd99lR82F4arRzjIo+s7NPI17/MDj3ix9U9L
BfQuLr/rRSs/lHi8ELqmqoSok4+3dRMCwFPeOyxSrII+N37iaL4TgDSDFygz
h4T6D8nbBn0XgKVbk8oavGS0yO/s82JcAGz5DJua3cmIZfoj11ZVEL7HsSru
K1NQdP6IXJCvIKiX9bfKh1BRhrk++0W0INxWmLEiv6Gi4m/HtgimC0K0MjZW
UKKhdtnFMxlYEFp2TI1mPaAhTpT4VIWUEOz6b7DM/C0dbVq5TVaQJgSZr7UN
asQYyPVJiq6tiRAEDmwSGdvMQOf/KB/8sVcIjPgNwjZhBrp+zjWGdUwInq7c
HOIxyUBPyDevB54Xgn9av+LkNJmo25FoE3goBKl54yWaF5hoeuzwxNbXQuCd
PH/67HMmkky8L53RIQTVN7WEPfuYiMoa1/4xIgSXk0YaqyUItLp2lRWLXxjS
NVJqr+oTaJt7uFegojCETkjo/nEgkNdcZXSFljDQXGuz73P9dCKNL0dgnTAs
UneM9V0m0CX2hvKt9sKg6mZtF1dKIN0Op41rDwrDb803eTxvCPQu5shnzXBh
6Lry475RJ4EO6ZxyU74oDDZI+D4xSiDB1tTfwjeEQS0mgK+Vl4VyTxWETD0U
hiAjNxZIcb2pWbHsZ50wGKofqXdXYaHOL02JX9qEYc9y53RjOguFn+xZWfNH
GGp4vxyt02YhReZUfumSMFQIzEaI6LPQk4+iBtdlRID3UKwmL9ezO8LVqi7S
RMBZY7lJETf+S+XYRBiLQN82hTsSXN9eaLRs9bEWAbu2TTVkNguxjjvtd3YV
AVJHosAQi4Vek4783RQgAr/XmxNHyCy0/23UiVUxInDVwVIpT4GFeINThenp
IlBsoD98SZSFstUKUuXuiMDxA1EDq+cIZFpfrrHshQh4HLrhf22AQK0BTfdG
m0SApasnXPEfgYJX9hh/7xYBaqm0bQYmkEzt5KvGCREQxZEz+vkEuu8ravdC
WBRm9oo0JyUQaIui2re7K0VhufWmqft+BBp8yT6UqSMKWna+1WnbCBTrYzkR
u04U9hUtH7TQJVB15WEJrwOiMBp9LkzwJxO5HYy6sjNMFM43mF7RqGSieelU
2voLorAqcDFIKpWJjDzL12o8FIXDCi3yp0yY6LNk0xvJOlHoSHmgJirCRP5l
3fYLraJw48fi7tBmBrojJurbvigKA8s8bVR8GGjjY9XZemkxcBm9qezEYaBe
V/bZp1Ru3Ma35eIUHak/cMxOtRIDqeznQRPhdFSx+zDrtIsYaHhfnmCb0pGz
QNSTAH8x4OTM9YdP01CqY37j1jQx2Ps+lbTtCA0JL00sCneLgZpgwPQ9oKJb
BSLxU+NiYLOQv0FwlILMt6sq/BQSB9cm57M3cijoxC0L3RptcQhT37Xm+RQZ
/bVOcYsIFQfvj01eZqkk1JahVzUqJQGMpeO2i6KqKPPz3eXHaBLQEbFzJI9Q
Qc6SDLdZEwn4tLNL+KDlSq5XVRf59knAMYGXgdeDlNB3X9E1co8lwGP7b8XD
j1agfovep0ZOkvBD87Hs3WwxNP03vST8xnI4J/PqW0juz8pnmrJLS4+Xw3WG
XpWa4EhlmNfFrTENy6Fxn4PH2wdjlfMdMUMJY8uh89+9b3Vi85VRPWUrmshS
cFTJsKPPWhDHNN7a8T1ICjJJNokWOrK412dfODlSCsyPRtWeYshhSxFS7v44
KVDRTjlepLYCC1pk/eu/JgXeJ8edvAUVcOyzS8mjdVJwY1D4dVmZMo7Pi2zi
U5KGtaNJdwbeaGArg0MyKyjS0PavNfSoDgkLv9puz9CWhumm08Mbkkk4pofW
Yb1OGoIO2/fcsSPjE+R3P1MPSYPx2tw2twoKXv3gMZEfKA0mf8q618lQ8fS6
nMPPIqTBJmlvDcOLioP3Hv33LVkawiZ/uH0VomHf64qL9OfS0Psy5x0vh461
9PjWmbySBh2ruK8rQ+h4EP8+bd0oDddSkz3mn9Hxga5KEf9u7vs3fnCaNmZg
ul+BTfQfaRDywfZCwQzcu5icmDopDeNRxQKvihnYXc1zxTNRGRC7mb1VZyXX
B8VbHd/KycCLBEu3D1uY+Ota46vf1GSggPyfqchJJs58T+ocYXL7O2SLf7nL
xI4uYiQ+fRmg6ChGaLUwsfzQ+D65tTIwGKf/RpKHwF9OdN6mb5SB7mfFPiF0
AttllWpZ75YBlLY58r0PgaW0rvq5eMqAawt59uF5AjeWxzzw85OBX6VLszJc
HyVY+06cCpWBC4Zjh35x/WTVscs49bQMcDb/8tNpJbCwz7rw2xdk4KhuWkzf
HwLXzbIqy9JlYL1YzAnRJQLHnJfjfXtDBk7tn067yvWnufLi+m93ZeBVZXF8
OtefPHd+nR15LAOs6/d2L3D9WWny8Q1vlQy8y7o3/pbrzxNvnovLNciAsF56
DB/Xn6ZOebb0LzJg8YF59jrXl7P9Fy4Zd8rA3qNulbe4cdnxkP+s+mWAKtFv
IsPtf0x4r6LLPxnIVUmw+skdzyDDarffvAzcoeXEkOks/I9hkH1KUBZ0TQ5X
vObO5/5T1R8pUrLwJCR3WQt3vr4bhai3lWXhZerr23bcfLRb/nqVUWXB0Pkq
y2SIwH+82gsbdGTB13rb5kTuetyZrPnz1VgWLsqYtti/JPDBs0W6I+ay8Mt7
69uL3PWky6cf5d0iC1ezSuLWxBO491bUY9ldssBsbf2x9zCBbxp6T9P2ygJg
fn4+awK71+4wNfaRhetDV45pMAisZr/2pFWwLPSdShN7yd3fr730l3siZWH/
7bn/fnH3PzNIit8vThYWlUzUr9xjYoXUnriUa7LwSeAOtWgrEytqPo6Zvs1t
vxCffEmdiZWrz0a63JeFucMbRPYPM7DaXyKYUSMLpyR1etrPMLDGuTm/hHey
YKNyti12KwOT1d57j/4nC9+N9ZcbrGBgmo2/e3m/LITVN4SnZdExvWfdbo1/
slAm98jL0YWOmWGyDmfmZOGdse9vLRXu/Sl4Ym0rKQfFkhEqtFQa1udfMOrR
l4N7d43T545QscHVRvamtXLweXl1wqw6FRtxrmsVbZCDpCNG+ms/cO+v+3py
iJMc6G9+1VOgScHrKuIkxCLlQF1+v3hfIwnbBsn3chrkoFK4U/D8VVW8Tay/
M/2zHBR6/PKWbVLB228+a5v/Kgdf481zNXhUsMOHPU11I3IgMfs3TnK3MnbR
yn3uvGIFeL9qSV07KY99enWTo91XwJ6hAXHVW8vxuZ2bzT5NrgD3D186hL/X
Vio/alTm45WH++QY3s6lJ2bFsjun2GLyYMxXyLvHr9ms+ZPr/WR1eagybxJs
6P5tRrULItttkofiuq8f1WMXzaq35Ah+uCIPyn3lB61PL0cORdSepVx5yOTh
vReOpdCg+B2sWywPkqqqE9nl0kj63aPjidXyMDF+PP9AsSxyt2oY3PpbHr5c
FpkwD1dACxsmGt+vUQDJnvmP3VlqKOl22N2FDQoQb+kpJBmkjqiCPLHadgpg
KXQ8mZ+qgWxqRddd8FSAV7HMUPExDZS5XuOhzUUFkNqYZq99gox0cm8lnshQ
AH4Ju/HONjKq5tM8fO+mAnTolV/KN6SggZeGNPGnCjCcd37R8RcFGYN1+tsu
BWC+0dW35NDQu5wPgXMDCnClc9XKJ5E05L5kv01zXAG8TZuYMw00dK7SXSRe
WBHix55AizMdKav97HsuowhOt1+X7cuho+IIn+pBFUX4EbtP99YPOmpecyzc
iq0IX88kPNdyYyDvrLldYaaK8MJhv6lXJgMtzEUZ3LFUhDMLLUmmnxmIWh4/
JOKsCKtIF0m5a5moTFm6wWS/Ishudsph+TGRTVja7UO+iqDQbBNknM1EgSY3
3N5EK8LGsQneL+NMZHVdctw6gRunC99/p0QgstCJ2MbLinDfqgFfWEOgmSMD
KnY5ijA9/VFJzoVAH744lH4uUASjPaZde8IJVGD6ytLhgSKg/UUHPdMJFHmT
3d5argh119wtNbk+dRDJ8d1dqwgpV2ir79UTSMdffFlnoyLk7vCBn98IJNAS
mu7eyn1/puWZlr8E+rr2l2bPD0VwDg48eJLr00d5O6s8fyuCxwXP8LblLBQv
Vr2zf1wRii9ZRP1ayUIeR3UHvBcV4WLe1MF8GgutbsuKGBJSAr8yloMi16fS
ICrjL60E/Lz2aSYcFuq/HXL7n7ISjN17kyfK9SeW6FsdTFUC/PGgVjw3Tgva
3jSlrQSiHteky7me9e3A+8JWKcF644SgTF0WsjTXnp4HJfhkNlBCECykUpiZ
EGmlBDOMN7sOabDQ+HJhEt9OJaimBRo7r2Cht8eCH8e4KMHvGxz7BSEWuvmt
e7PQASWom2D+2jFNoFCLbZ1x/kpAJ6vvcfvJrQfuvjgqHqYE1ud22ZM+EYgp
oymUeJo7Xpbb7avlBFo6nnFV+oISuBT+2PHhJoGauwT0UtOUQCz82KWX5whU
vCHwlfx17vhqIbUB3gTaI7d1aOVDJdC4+va4EkEg/fDyU9kVStA9uuqGvACB
RLuZ8qQ67vuq/lvZ2clEz0qWIXqbEmh9ly5qi2eiJPmAzwXd3PbDmgor3Jjo
YETnAc0/ShCWM3ec0GMieetnSXpLShCt+mJ06C0DDZXSaQ+FlcGChQZupzHQ
K8XUZ4YyyuAqS2RYcc9z4E/f7tU0ZQgdfNzrOUhHH05RDSytlWGxXSM7qp+G
8vuT61/vVIa8E7ze5FwaOmm7tMfKVRka2zUEOnbTkLZq+xnbAGVwP9k7W/ia
yq1XE1uc0pXhbV76+dA4CrIYmQ3z7VGGMqNTPCYVGih0Uyrr5R9lSN2hlnnS
RQMV39Bul51UBsdTFfByVh0p7nQ3eSa8EvTWnswzPKqG/pTVTi3TWQmfvXWC
881XopTopKArx1cCzzMJB8lQOdS9gu77SkIFvLpPl7xemjRT8MOqCgoqIJXx
cM5Df8zMpt7x/SENFYipLbz5vGHY7ElYvNZyfRXY9rF4X798l9n5rr+DTo4q
oPJ1y8DRuW+VnMLyAyM3VcBg9uG2I4N8+NQau73KxqpA+OrqWHUq4E2u2f9W
mavC99kV0ipvFLFk1O/T9jaqMI5lfgSWKuGsmjO3k9xV4eS75Y2OYStxmdXz
34JxqrBCNfTHyUE1HHlYKIKaogqd5wgfAayON1zcKWl+TRXuUfg/627SwF8+
DutFlKqCxNt936/JkfBfR8qxsTZV2F7xs6Akg4yfhvkLSfeqwuRvnqf0CTI+
mfUiQ2dYFXL2qQyU2VKw+Pdd5Yf41CBcKfS26BIFMw4k8HxnqcGHC1sO+1vS
8HBsW/KCgRoYeViMvEum4Ud36JSVSA0kSY2pvF9p2Hy4ytJhhxpMjtgzmg/R
sWvwxPl34WpgtY7P4LA39/dvurnK4Bk10Hb7NvA6j4H/lCUWCSWpwUwI7Xbd
VwYOmyc+mOepgXfPbH6aJROvUwvZ616sBhu/HzngcoyJheHVv4gyNWCvCFN5
kMfEl0+7rnj2Tg2yDmkEjM0w8Z5bd283N6tB2KGdL1o0CEx+Pb1q/Lsa1EiW
7jCxJPBAv+Ub6d9qYL+lIV/uAIHvi6Y4606owammkQNeZwkcovX9t82SGvi/
aw/TzCWw2VbtCG8RdQju3L3g/oLAAv5hkrGy6uDNraH5/yPwu+TXObdU1WEs
+HetzCCBUx7KsWsY6hCR+dv5/DyBnf/bW/2drQ4fb9/VOCTOwqSp4h2Lpupw
MudwZJESC/crzveu3KAOfq6Y6kBl4ZLVm4+ZbFOHd4nzfB5aXA/uSRPa5awO
zcUV2z6wWXjNyZ6MoP3q8J5vW+x1AxZedl2PdcmX2/+q0YFP3LjhZUR5yXF1
yLfNGPLksHBST4PN+2h1aHpS4bKb68ldAoqdgwnqoE2cNn3I9asaw9NPOF0d
BMvbrX25nuzb9ICHfkMd2k1Wp17gevKe91Ly+rvqsI5QdJbhejIwwYay97E6
xCUfJC9y/by6+Mqjk1gdaFObH2/netKipXFhuF4dVuIrEo+rCbyVh3+j2yd1
mNEnF7bdIbAjYZLU1KEOaVvds6qTCLxvu28b6lMH8Vh37aNBBPYNzyXfH1aH
PoFTnwftCXw8r9VHY1odbOr0V+kaEnhDOCkySkADLK2F39OHmPjt8opcY1EN
yP5isf57LRNvy3Oo/yupAXuj3y8GZDHx7vfx0nsVNYDjY9qptZ6Jv++lGymp
akCoPLvWRZaJvSarnD+SNOCLmmLIsR8M7K8+mbtOUwPogqx6/xAGnniYVD+j
qwGrRl7c2o2453OT5lCpgQbY8jfXgwADnwlwNyKbaUDDC2UbyXg6zqxpqOez
04Cp9T03t0bSsLqj59Bzew3wIDKab66i4bw/S9KBzhqQIX4gQm2YiktWGO7u
2acBz59ItN6yp+JXB3KGao5pwJmOtKzS5RS8ed5E5kS4Bux4yKux8IyMG5O+
GBlEaUBQnG5GvgcZtz0TicqL04CAw2hqVQkJD4sFyZzJ0oDuXy6YYqSBFe9v
WrWhWgNY4jWbpviV8eHp0ah6CRLsGGF9POUghFcHeMn/lCHBwa5E5QQrASw8
2H53mSIJrMYOXji0Zhm+1VHTbEYmwblMa7c/BouVnZWXtR4bkSAz6pC/hMLv
StszJq033EgQzVeV7TE8Zqa2WHQE7yfB2lvOReOK02Z/jpGXfTtEgm+UJ8pS
6+bNYg+K6SgGkSDB+hBD0YIPVVl/O30xlgQztFtD5EBRxJE5pRteSoIAq+2d
HNIKxBM/8SrjCQn26PWXh62QR43LvJ2flHPj/RdfRAkpIJ+J7WdGa0lgvCRs
vb9XEeW1UjsOtJPg3T/1p70nVdBRuyv+Z7pIIHCxZeyYqyqCBgnB3F4ShGXR
HgubqqFv5ZN6ncMkiDjUX/lhUB3J59Sf3bmMDC/Zoe82JpNQr8JalaPCZHjH
U7jt6xgJPUgqLU2UIMOAbrLy1Z1kZBud+bVBgQzy6+iy/lIUFOt5mLNOiwzP
QsOcff2pyKHz+2tXNhlMC8VfW9VQEXWXvcsJIzI8PFExLCRHQ1WbzGKfAhl+
eCQVLiuhoRlNqU5tezJ8jQ3mYTTQ0eQ15VP6zmR4utPHY5kog+sRGtXEjQyU
x82vMjcy0PCYibfFITLscN+e0V3OQL89LSSsfMnQtLco5dw/Bupv2XrfNpAM
dJ3lWR/oTNRdvm/SOYIMg5nJMqtjmahL2/eKezQZHm8Jat/2mIm+5hxf43WO
DGUsd/fpLiZqkz7d5ZPAbb/xKVpLmOuT0xeiA5LJUPJv/d4BbQJ9nkinhaSR
AeXXO2racT154Gb9iatkGBF7yDMSQKD3bfd8oq+TIbnQgMFOIlCD9VPJ2Ftk
SKtcej98l0CvX7wsvXCHDE9Se+m0WgK90n23M6WEDDqJt5I/dhDo5Y3mqYxH
3Pkvby4ZHSFQpeyPzOxnZCiUCQw5zfVk+Znfa/MqyaAmJqp3RoqFyqYmvhfW
kKExaq3vhAoLPT7EE1NST4Z9TzYv/0xnoQcdoozH78lw0CbOQFWHhUq2rGh4
/onbv3fG7DPXk/ew+pGqFjIcrqtqGDdgoUI2S6ruKxlORZXcOcWNb+caPHz7
gwz6F+t7QtkslLsCOXz8SQbYXFHwTZOFrp/bPNP8mww/XSudiigsdG1mR9bX
v2RQvMZ/fUCRhTJ9XFH3BBlef14VkSLGQunfDnb/miVD5c/2DffmCJRqG3hm
aImb/9WP1w0HCJT8MoI5xk+B1Z6/QthfCHRRP/bttAgFzho6zN+oIFD8rUu+
i5IUeLlhS1Yc14+xCtek+eUoYPg7ZHHwDIGi50p3LVejgPbJO9follzPH6mY
laNQIDDeVlqIRKATXXXXlJkU2HTmwaMjs0x0rKajh8ahAFOiOf7rLW59Yfjz
rOYqCojkR0kNhTCRf/5fgr2GAhvkfHanbmQin3gB/zUbKFBhsn3peRcDHVxY
LmtuTYH3DoPvLAoYyMtP+cnGbRRQ+XjYLMyXgdx36M5vd6bA7l+t0ktjdLRz
pVPsIV/ueGfPlCn30pDdhX2afoEUWNJXy76bSUNbl440Bh2nQMj3wriVtjS0
qSdaLiqaAjsNNLuelFLRmrv3rqelUSD9/mVSuSsFdWjczbG8SoHFrorx1WIU
FJZWmD2eQwGDY7emFJ+Q0dNTt7O2F1Igu8k1VVyIjDiO1zMkKyhASw1Mz0/T
QIRAatLZHxSuV071J/5SRvVhlxINf1KgsuDCl0pZZeT1N+li7yC33aM4pHSt
EsrruJBgPs6N1df+1IxXQBoPzsUuClLhku7f8TOSckjeLTzqmBYVmtUVzXwT
RdDjL6GRNDYVSp5Pexo9EEI7rY6f/GJIhYZZE/6pTwLokmHwCQ6iwtn1bjWC
y/mQhLjf8WE7KnwtJn1+/3vcjP+Zh79XCBX4f9g5xwX2VI7KWLk7VFPhwMlf
T6/6SePWw+QP3q+pUFWtpv32kAyuqptFke+44z8vPKjuIYuTwu6qFzRTwXWC
z+mTzQqs1y3eNTNIBf34K1dKhZSw4pq+rZJ/qcDr4yHm8FcJ86S9qCRPUAFs
XFVdmpVx02bfbOslKtQVplQbZapg39Iml2uyNHB3kXtyfVEdO4gVvC9VpMH7
wuV+fw9oYDPPqLV1qjQ4MxHLO9CogSWU2KojDBqYr86zeJ5OwveiLn2FNTQo
66zKr5Ol4NR2bxv7dTT4LdR9XcaXgk8YrK84tIEG0fpNOw/VUbB1/9jVS9to
0H/6dKhsABUP2trv7t1Pg+tnsnt9imj4U6H22+lDNAi0FbJUm6Lh58sETSX8
aHCTYZdzxYyO454+UTYKpUHoGoZYUx0d+0snnrc6SYPb9h/Tw4UY2NHnwKzr
ae54Fl6SzZYMzFRXbD93gQYaIfO8J8oZWCr07+asSzQY0izILP/HwNOf6p/d
T6cB+sbcmsxg4vqzoVfabtDghKgpayCOie9/txMZvk0DYsmcsfcpE2esZoXy
3aOBsZHllHM3Ex8YbnfUfEID5cV/W2v0uF7a9LAelXPnk7BZl7WTwEY34413
VtHgS07u+WXBBFab31dwsJYGtIanbJsUAgs6rFGMaKDBI89sHd4SAg+XyMUm
N9EgfZVmlXo9gZtFhqZufaGBhexG+1udBK7cV3vgeRsNihw3xSb+I/DtF9da
Gjtp8DrljvLXZSx8UeHYxp4eGmRp/pGIk+H6M2Dr06l+Guy+HFmbqsbCrm/p
DPFhGqxvqeVfZLCwJW0pTWOMBrYu//prdFhYK7JF0HCaBuPvh7v7uP6Uays5
tnmBex46zUr3cX06z4n96cJHh61Er9NafRbuTXB3OCpEh6ilddRAXRb2HdQi
64nTYeFaIzuWYOGpjTNDQ1J0mL+dEWxHYuGoW7XP7q6gg8bb5vwmeRYWXXbp
zCFlOki+8L++TJSFU91d7RjqdAiQpWwfniWwaiVLtY9CBzMivCZpgJvvyqn+
m0w6eDuFGvzh+l0vtOaRuzYdBNM/GvNVEfh5c2KUGocOu+JiH37JJ/B6gz02
X43oYBMa99Hzwv+9z1TMNKXDtNka/jJ/AjuMjPfsAjqQdFfOv7cj8HeblyUr
LOnwVnhz7h3ufnrfuRD+eTMdirvpinYSBI7wpMva7qDDcxPOG+EqJhas+dcp
7kiH+PFseVIaEydp4DsNe+jQK+C1WdqbifM6dplv8KIDMWFdESvGxDomVEl+
HzoIi69uUWhj4Kdpf9te+tFhNapNucitpxrs4gLWhnLXR8kp28KQgXeW2K+d
i6DD3RdnYi/M0vE3cbLIs2g6rFl6BB9f0PHf18+vGyTQ4alzvbEb937Im/1p
0syhg6zgRhdTJg1fv1p2dSCXDrf1RvoWv1ExMRNzIL+ADsnBxktDyVS85pHq
EvkBN5/o5+6Hxil4H8tWR7mWDkZJh1uS88j4vvyDBOHfdNgxxdp1yl8drw46
6Vg3Qge/+rMydgVquOajFTVmnA5SC92z/t9UcXNCT/nSAh1EDXf8/IVU8Dzf
it+TUgxwl/vxM/eXIt48ErK5z4gBxOlLhyc+SWMVttpZ4TUMyPJq0mz7IoWH
j76q1lzHgFaVNl7+O8tx6qTUmqPWDLjZo5gvf0MMdy4U6iy5MaA9glr20HcZ
Pir+VVYpjgH9h3IyLMr/q7TYGr1tzUVubGws+TjnYaVCEvOCWwoD9u0MN8Yt
r80qZIMFb19jwBe3m2z+1z/NBFdKznAeMCD7lo2dKmXeLJOATpsOBpT5+PP8
ipBEh31+Kvt/Z8CLDc8HXiAphIoSdqX0MeD8oo5rh5k06tVr+9A2wgA9h/Ti
26tkkY7x0RovfiYENmaE3ZFSQDxhijznRZiw33Z4rTGvIvpcXrmmSJIJV7ck
bbYZUUTHkdiTMUUmHP0VqnOrRhnVbMgriNJmQnFmA+mElRpKi7Xqy+Uw4T4j
wDiLqo4ONvwlvV7FhN7t53jPzqkjya1rr0qYM+GdShJ/SZMGcrRvvpDpwARn
1vh6T1cyYqWfaHixmwl/bCk9fi/IaKGVLPTDnQmF0DMVr0xBN/f4RTF8mLBB
zfP4p0YK+rNPOPBRJBNGlLWDMtRoaDjb4gWOYYKeaXZtjQ8NjbRFCb2NY0LY
DcvS909o6J/tzNUfKUwosd7a4LaBjsbOG/78k8EESZ+ajrbzdDReG6A3fY2b
L5nYLP+ejqZMB19JFjDhWElHQYUVA00foy9XLmJCTIKiq/JZBpot9XCiPWBC
6L2yYRJmoHlGx5BpBRMMn8StV2Qx0aKHgvHGl0ywO3PffH43Ey1d2xG9vY47
Hy/KhaB4JuKTeyd/6AMTMsy3REn2MBG/rfDeoP+4+Tzu1meIEUjgvMXdyHYm
TAyUb6rWI5BgbdTE+S4mjO6cFf+6g0DCPC9QWi8Tjgt+UQoIIpCo6UzcjQHu
80b3t528RCCxY4Zf7g0zgdKyvpWnmEDipQFqZWNM6FAvVpqsI5Dkn6KDNdPc
9SddfrH7G4GkGIMPGheY8HW7eaHuKIGkPegLbXwE6JHxnB8fC8lc89jYJ0TA
+tOjoiulWUiuNTv5rzgB+ZFl7rqqLLRCtqNjTpoAuTrhsrtc/8pvVaALKRCw
ZCIye/H//++P2+Evo0KAx34Di1auZ5VeJT5XJRGwmee11Dl9FlJeestP0Ak4
r/Nb8yrXxyqrhW0NNAkgXVsolNNlIdVgiytIj4C87aE/x5gspHY/qsfKkADP
hz3RJhospPG7QtthNQE5Z8s8f8qxEIk+E7IXEXBzzv7ZnCALkfcaVh+2IGCk
uH8wbJJA1KwA8eObCdhfsqvQs4dA9JYih9NbCfA/rdf74j2BGDKD1y/u4Oav
k9Jw5jGBmFvov684EpBioNaAMwnEivUwvOVCQPTN9gu+EQTSqsmOvO9BwEop
5kKqC4G0F9vflB8g4N3tgtVGpgTSC9rh+imAgLSFG58mh5mIU5JY8O0Yt93x
9EPVWibSH3z7rz+ce6lD2UcbM5jIyN3i3NIZAmbHn/l2GTPRqqtRH0XjCbg3
vdV4swATGTdXrJRPIuCj6eZJ2yYGMrUxvK/F/VDwuCS7uHkPA605FzC7Koeb
P7Xy4SZ1BjKrLrJYn0fAWuXbBnNddATG9DanYm67sdJ4qvP/v7+qwHeumgAZ
tz8nnAxpaMBjY4HpawKchbUfi/6hooQbIVv/viUg5rl/1Z/rVPRZrTXT6T8C
dsc5XXQRoCJ3pSv6Wv0E3FCJyyl9Rkahkis9P0qw4Mu8aBVRpI5UtliLnZVh
gbSV22v3X2qoKj68dLUCC94ZxZ38raaGBEW+LuRqsKBdtujXurMq6NKya2nH
9FnwvSox9dcqJXRvWq1+pRMLVFf93LBzlQyyXWXr+8GFBYqV9rG7baXRv+BI
uTMeLBgqvWPf4ymFTMa63Id9WFCs8wriVSVQ3dD1maqTLHCeXHedyBNAXd1k
Ta88FsQe397dFDtgJvOefvH+CAua90k0hBkJ48URvVsN4yx4VFRt77lWFA/K
mFb0zrAg4JVr7K114rja0XZQkV8TZm/wG97VkMKBvSEbTilqgvAFpke/mBz+
Mle/aLdOE3yXyUgeCVuJq9Q+rzi8QRPuhO77mbtHBd9b903rrLUmLIUvVU+b
quIz50adn9trAsf0wMUbo2rYSFb5KdlbE6arBy6vW0nCZCNq4xo/TfhKajyX
HUnCkk46fQ5BmjDS1cpv0E3CP7PNZeNPaoLnnW/j32+QcTrLx2/skiZ47a9p
MRSl4pgtwWclMjThzfeotZvdqNjfP/Ia45omOJncNrR6QMWbnqS83Z2vya1X
eY+O2dGwQdu17uB7mtC85m9afDYNa8znzySWaoL7ahmx0X4anl5XwXhVrgl+
wUcFBEPouHd/nVlnFTe/X7Mq+c/p+MO5D/bTtZqg+CbhxvQcHRe+7z2t9UET
TtaGMi6FMHDa3+HMDf9pwn7TW4HvSxk4Wnam1L1dEwKDkhtzBhjY2Unie2qv
Jow/+HZyzI6JN5xQmCoe0IQL78f2eUczMSeHJPlmWBNELO/57bvPxGrVmrSe
MU1wfHCOt72DiUX7DNcsTGtC2tu+4jf8BJ4Ugh0Ki5pQpwxIR5PA3Swrb/Yy
LciTay5cZkvgxi07T1kLawEK1GJs4Hqr3N81w1NCC37wv7H8d5HABSkHSyJl
tCD7RGg//10Cpz45WndFQQsWHMfXhb8icFTbiW8PVbTgekPoh+0dBD48f3b8
PUkLGjODnOJGCOyonizWT9cCBZmVfSq8LGxhfpXMp6UFQ53Ln4tJsbCe5y0T
FbYWbJjnc9qpwsIqsSXbjIy0wChj+/EJGgvfKS6qmVmtBb+emz9N0GJh4//u
Gr1AWvA8nfj3UY+F6+YKC6MstOBEsEPpK66Hd5ILVCw2a8FL62PV+7lx96bb
iUJbtSDe6ZPBA65//f3y+N5u1wKR1RH2RSwWXrx8M/jiLi3YPRN514HCwgkV
1/vt9mjBdkJovFiJhZV7snev2KsF7MlEtacSLFwgcq2x1VMLDpuu2Oy/xK0f
9K6uy/LWAu+MNRUdwwR+5XDlkZufFrfeP/1rlrse2yPSGZQgLViTE+PSVMf1
a+7lzJ/HtcDicX2rM7ee8G1IkbgToQVFi8k7ci4TeO5vctSRaC1ImPeQyAkl
cKxC0pjeOS3Yc3nx7J7dBNePF73G47Vg3s3iZPtqAnPiz9uEX9aCYSXBScoY
E1eVxmKzTC0Is05cnHjLxFtbz3L4crTA8M3lhMs3mdibdloxrkALVjVVkm02
M/G09al4myItsJTdNOmtxMRnj0YuLn+gBb9vuPV6/WLgmzi8N61cCz5qbbwq
FMHA7U5B9/Mauet1ZmdTUCIdH4w6Sjn4WQv299yu47Ol48nb/mmarVpAOm1W
liZOxzLjh088+KEFt5ZeOfSfomGri56bqsa1oJJJG+iyp+LWR/vKT89owZ0w
13orQSr26tirs3FRCx6tKqSMPKLgaKarXKOQNvjI5GfxSlDws2qH7x3K2vAq
O1yVUkjCGwZ27shR14af0Qtz2jYk/GX5jjoPqjaMz9Q73R/SwH/32N4b0NaG
7d2Zn9doaWDm1MbjU6ANN3kPM5r0VHGGpomU7AFtkMnOZUp7y2N76/dJlT7a
8F95q/2/+BVYxmevtLe/Njy5Rz24cFcOx9+Jk3kZqg33xDwUOn/K4JNEu5xf
gjaYpTvlt6RI4v2McKW3pdqgqDh9wd55qZJNeUE+Pa8NTN0De70yF8yGze1y
dXh1IMg13lOglAfd8eijtAvogHp+iJNPCh+i3pSgsZfrgOfBzW+37hBEiiRX
RhdJB7YEvr+59FwCLaotaZpu1IEPBkZCJ5fJo3KzlHs/rXWAU9ionv5dHh13
ZWhf2qYD2btm4EW5Ahq9Zqsz4KQDCimq8j99lFCvynW99MM6MB4XL3C3VAU1
KK8zHEvWgZuncuVa9pLQB7USOn+6Dhj6PWFbvCKhZrKq4oosHXB1yrQcoJLR
D9bMrNFtHVARHvjz6DsZTa8urQp7rgOq/keibddR0aKZ+oN4rAP/jWywOJ5K
RfzrL+RmvdKBdN/WF0l9VLTc+tDZykYd6EvX9/A/RUP03SQbvh4dOO++RXNF
Dh1puSWule3XAbW80cDe73TE2begQx3SgdWqW58d1GCgtT5t0humdGDqEu49
lsFA5n4bl+2a1wHnIctL4x8YaFPg4/EDvLrwaPJeh6QQE+0MT26JE9OFkzM8
JcsOM5Fz5FJ9ppQu3FZv0PySyUTup488v7tCFwpNq8jar5nI61zH3QplXXAI
FjYRHf3/3982X3uvrgv7Yt7YHVAkkH/i04udVF3YnB98HtYS6FgKLWqE0IXx
K3KrLrkR6ER6SgCPri6EJlzodIwkUPRV3n3SBrrAtJEyTM4iUGyO306yCbd/
6xd+46cEupj7zVLfTBeupr9ytGoiUGq+9SqL9brw/szuG7W9BLpy9xnTfpMu
6NIk7udPESi7hKHstUUXcm2TSoeFWCjv4WWxkO26ECOmybyygoXuPF22cG6X
Lvzntth3i+vD++UBwxl7dCGFuV1IjmChJ7irq3CvLvQNfv/TrcNCFTVbPj73
4uZXSDGS4fqz+nV59VsfXbAtu1Z+gxu/fks8+uqvCx+TmXHJeiz0rin91lCw
Lqy5g1p/aLLQp88C6YthumBuYSOaQmWh1pbA2OVRulBqOHrzljILdXb8CNU4
owuVX6RBWZKFertsfdjndUE8Ybx0dJFAgz0v9pgn6sLx9WmG2kME+vtLc+uO
VF3wSgs41thKoInfV9D+K7pwOfPG2ZaXBJodEWIHZ+tCy23+FqsCAvGMB5PP
5urCVyU3Xc0Ervfn7QQKinTBONI5E9kQSIanarLsgS547zAtCGMSSJFfp//N
U10o6WrN0+MjEEVc9O3vl7pgHcXOVS1mIqbU8Yr5Ol149uqtiksUE+nI/SyS
eKcLf4rpnsxtTLRapTpJt1kXyoMvbwjqZ6BuCrVzoF0XPo2Xfah9xEBxmmc1
87p04e21Fff5IxmodbVVneIA9zy1eli7SDBQiNOnOd557vxFto6Jy9BRol4m
1ZVHD+wz3cqdGmlon4G1dTmfHrCN75bjWBoSW1OUESykB8rqTaf+TlGRs3WA
/qCUHozm3VqVUUVBOrZk542yehAzbUfa60tBfDs+R+Wt0INj7afkQ7j1Y6Gz
YaOrsh5scg02yj/Cva+HZg5+pujBlVwfy1EeErd+PZVdYaQH7XFPusZfrUTe
CZxaJRM9mDf47PRkVBmZJfX8PmaqB10xMhUqKsqoL93ShA16sPvXpdckb0Vk
kC/y5dZmPdAudbpIG5JDn2qTRRL36EHToQtrLNaJIcllN4P2RuvB37SiAHH1
jkrBGbxjNEYPtFxE+CmjfZWLw984p87pQX1SXlTktuHKkXal0esJenBpCb2M
i56q/PAg+cj3ND3oD5Id8hPjx5c8Tnm53dUDxy0h55sVZPB5xxzLkSI9UInb
oPVRRhZHb31BjbyvBxdNy/lbuB4NXD3Tnf1YD/JFrYKzp1bgnTIBbp1YD0YC
/LJdHyph+Wp3R5cvehBoqPZn/Q4NLFl2ctVQsx4wKlbX7y3XwILFWfIRbXpw
+sUz9XoSCU9daf2S1akHwcrVuhYDJNwasM3ua78ePNNUGu7aS8EfDvjqHf6t
B5HFXtL0cgqud0lYPj+kB/7+pmu8ZKj42eb69yvH9OCEcotd6XMqziSB1e4F
PdiXOb/nzCgNX1JwJX4v6QHNg2RUZELH5yVOCIfzsSFo6jztQiQdh888rcsU
YkOTs2mBIz8DB438d4slygav1rx8o/UMfLhvLOa5OBtOFXOSSyMZeM9H3fXt
0mzQbZvh9xpl4J2vt5C95djgGf+XlkpnYpsXPryz8mzwj9Bw3uTExBYP477H
KbHBcf+N2Ig4Jl5bmI+VVNjQWtb1SecpExvl1GYXqrGB+v7QpV3dTKxzuSfC
hMQG8Z4KhzFRAqudUl/jRGcD55KOVuBOAhcHCpO/Mdnw8NbO1+VBBDbzGhXa
q8mGNdaWolGXuP50bB/q1WYDaVj1X0URgV2saz4f1GPDI6XWOj+ul/6svffs
D4cNNm1lSmlfCXxC73KOvyEbJBWrarT/EliccvLM+Co21PMo9hpwfZm14oDP
8dVs+OcS01m4nIW1hLfZza9hw7mZj07xK1m4fNZ4VRRiw9C8pVkrlYWthkiq
/OZs6Nwm8ShRk4Xbu0SXxVqwwWrhLqmU60XvT2P9YhvZsCruMGsNm4VnX31t
TNzMhhLnpnt6XH+ef1r7SNaGDXnys1UXuT5VulOcmb6VDc08jKcOdK4Xs9Kj
Vtqx4eluOfk4Va5fE6O8cnawYfbNmSy6DAvXnzpkQ3Fgg0F44w49fhZ2DNrO
yXdkQwrpfHL+GIH7vUwVNXdz38/nMnbhO4FDnKiLxS5sCJm56tLXQGBBG4le
jjsbzq+emCl5QOA0s8k3TzzY4LpcyehvOoHp7K6S1Z5sOJ7hUV0QRuAnlPrL
lQfYkJkQlfTVmcAb5EvDzb3ZkDWt+umiMYH/E87cW3eYuz9L56eqZQm8fy56
o5UfGyozPItP/GHi8SEf7cYANrzdbv4dVzOx3Oe1M/8dY8OON0qRYweYOK+W
3uUUygZ7q4XOP0ZMrF+2vPZbOBtyxwWunVrGxNuv/Ujqi+Kexzm/k8mXGbg7
seHYodNsqCguOKKwm4GPRj/cM3SGm+9Y99atagycfOAMc+I8G2rZlVq/rtGx
hrOvZOgFNtiminy3d6bj+za7xucTue9bOvH3ohy3/mITVfyXufvzskzkRDQN
S86/2yWXw4bE5nWq0pZUnD38eG3GDe550PVlXP9LwTo/sikqeWxotNtw3yiT
grfU+Y9QCtlAniiIyfpFxglJcuf0H7JhWDpZYcNhEhah7Xmy/TUb+Fek6M9b
qWBvJWR19w0bXg5/7Rni1rsNEuTOZe+467UrOyW6QBknTP4SePyBDSLD/2K+
zStiyfpAe4V2Npwt8bPfm/B/X8aPd/zh3rfELxNdxeJYpfQ5x1OGA3D4gfyD
+w1mJ25dq3shx4GDl59KuT38avbtSpSzvAIHeP5eip8U+GmWHb0h+vVKDkj4
a35SvPfPTGPnp48EjQN8waPB68Z5EG1qwH94FQccFtK3+H1fjs7+fse/cTUH
1v7ZNZTXJoV+dpVk5KzhwLWPZjtyXkqjgvrgqm3rOKCZo8v7J0EWsTJ5pR5a
cWA6d7VNpaQC0lmrVBLiwgHyKz5KWrEqekg5NMfnzgFTRsbJ+7FqyFj02caL
HhxQjnl54JGbOjJvcfyed4ADnPSFH1LRGsghIEP6UwAHghznjCgyZNSxq9/F
JYgDO4ruyJYEkJG7mfGd/mMcCK1JiXZpIiNvsVbzpXAOYJuFvfMxFBR5SyFI
6yw3f8mu7vWtXF8mHKh6GssBvYiAnX0MGjp/9Kn4+ngOGFXtk9gXTEOpaNct
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
pppo6EL3xVbJOhYM9k20a5nR0bWckD+XX7NA3uKE6FgAHSWFei7Ua2CB4u0j
ae5JdHTHwpb9qIkFZlMrt5XW0tF9BZYTaiXznZfxJ26UjvLbNYJftbHgfueI
docagUozJK9u/sCC40Uj1deBQLWitpaDnSyQbr7cuf4kgRqkn/yW+MKCwB1s
WetbBGprylK53M2CBMdC35QiAnUmxbF0+1jQeqXXYVMDgXr9QjfmDLAgpNXh
wJ4ekkeZXkFmgyywrDZo7Rgn0J8Z2yt1P1hw2tv2TaY0A03Vsv5z/cWC1TYS
07UqDCR+VbOlb5T0Z0Bj9SptBpLbLvU7eIwFK74XPVeiM5CiwbCyxCQLJP0t
mrkkTy4Za2Ne+seCD8j7X64xA2k/feKoM0Ne79gxfIKMabF3Ax+KsaHm64no
dAMGMnK5dFkkzgb7EmaFBsmnbL0j+S8l2YAK3e8NkPwqGvJq3iTDBu0LZS/n
KpM8W2KZWirHBva7qpPHpRho6DRjr9Z8NqRaV9Ymk/upcpxndlKeDQt/LZfb
30ugJJ1huW5FNkyyy36NNhEoeKjxnaUKGwbpx/YtLSeQXcl/GXcXscH5Iytv
0R0CUaPig+apsuFH1aklpWcJNO0YunKvOhts5muz1QII1KrjrtCkyQbfAeVK
jgOBHgzBJ5YOG4QTY3eUjUkejZIM/Uthw5Bw+LBaDx2xN/ZbudPZsPPV4IM1
5XQ0X7du4RMGGxrvTuZaXaYjXHIxN9KYXC/P7noBj47iowLD+pexwWV+xrjR
/7+X3+hsZ8tkQ/a3XJNTrTSk/UN9QIHHBr0j2/Mb/GlovGTmcaCADS/7PX+2
LKOh+qjPEW9F5PUdBu01f6goTDdTJ3EFG97XFopdC6Eilx/RP2ZWsYHYpPgi
lEdFJqW7yzws2bCYkbfa5w8FdW403US3ZQMWn/efvz8FmZ8pv5C3kQ3LTqXQ
6gX6SNUpxX2hCxsYf+2irn3TQ790ww0Ou5J6VitHxV/XQ6ml1i/MtrJBucri
i9ewLpo93DxT48uG3LHlMrOjddAzp297OkPZ8N/P/TGcfnV0U++1cOUxNnyk
TDDPL1JHgcM5snfC2GD12vD9jpVqSD86+M7OCDYs8fVs/nBpCQovE+v4c44N
YpEDlvKqC9Fq/cVr56Wy4dYCR+kPCfNQ/mCljlcaG1jrYdGVZ3JI//GBP8V3
2PCOPjtjsF8Gidu8ueWbzYYR3vW56iaS6GlA5K9n+Ww4sODWla61U2ZmJaPX
QqrZkLyS+O/LjbzyB+Gpuxpq2HDBsscnhN1crmHnYE6vY0OfcaG5/tOu8n+d
2QMt9WywCNmGdkQMlxdLeoqWvSf301ujdbF4ppy9vuFz73c2cLdLSE9Wzcd3
1I4/NvvBhu+ZUYXTtvJYpdsg5spPNthtqX6kxlLAowejWCv/sKH1ZM2GtllK
ODcRRSXNkOMoPokbvhAb99833KjIgVNbOtb/JDRwUu7m2feUOTD8ukiSMaqB
5x+ReTt7EQfURJvEm0o08dD8HWE5ahyw/q8kJV5HG99jqjfJUTiwKmC5Gi1e
B6tP12R40DjQXnPVWe2XDj5bffBIEcEBRpF0WaSNLvZ3baL4GHHI88RdNf2P
LqaHRR96yuGAXuiL3yyBPi4VpEvY8jlwTS66P/KcPnYYw3EtQg6kHL59pOr/
/5Pa8/tenzkHpj21mMOhFDyXIc/fv4oDtA/1rrVVFJzczaj+a8EB+wcv2QcW
UPELt21d8205wCo9ba+cQMVui0P3xNtx4H5c4tvpD1Q83HTlr846DvyXV5V2
U42GF695qcJy4oDyjwSbd5do+J5kT2q5CweK1Qatd9XRMDydZWK1mQM5e540
J8ymY18e22bzNg58tLnfl+9Dx/9GHd5+9eBA9uF4iav/fx8xZ6fXnh0cmOm6
Xz31lI71d0X+HPPhwDnReY/e73RcSEs5dsKfA07crD12ygS2/VIiJ7ebAxed
8nuMeATuTGqNvxxA+re3XidiM4EDXX9SNPdzYLlB8qu1oQSWXjg3LyOQA+uO
ePVFxBP4ZgMVlh3kgNnixSWMPAKbxJq/Kj7MgaUT0U28lwR+buXmuuoIB1a0
HJ3O6SSwi/jB3lfHOKBwo8z83AiBv+OLgc4nOCA2aNb6Zg4Dh4XeE+s6xYHa
mzzdQAUGVuZUn/OP5MBX6qq8w+oMnPWrS200ipxvFMD9pM/AZg/+ZR49y4Fj
1ezQ2wwGbvRbxJY6R+YndM6BSpJXvSnLn124QPrf2XdilREDT3baOqhe4kBs
/s4QbZJ/z930+Xj7CgfcB8qubSL5WNflpL9hPAdORE8EDWsxcIFS4lhBAgea
z2+W7VFhYJs3j8MhkZxfeeyGQIaBO6IbFWpvcUAq7WrRrwkC77cYTNqQygEw
ucue10dgydnSBh/TyHy+fa0Z20Tye5lukXcGmW97z5zAUrJfOCyyGM4i8xNg
41iVSuCnTJemw/c4kK9MvRoeSeCB7NjBmEcc0M6cSFlnQeBjPpkhC/M5oGMw
S9Zbl8CKes+kkgs4EDVrZdKvv3TMTxjXySvhwO61zhdOZdDx641KD4XlpJ7G
lMgLh+nYQ8FIWFXBgSfz1tZQrek4OsrT6V0lB8xPvOuf00XDmquOffF4wYFg
t7rnG7NIfp2J3/u9lgM+J4NaLAJo+H3w6+iZNxzYse1kuuYoFTN28DDlPQc0
ZSNCNnym4PO6dpOn2kl/xuTc7BIpePSTB+tzB1nfTLMqTycKLneNyU76woGK
v/KhY0/18XqHT9cWDXLg0potlscj9fBhQcRemVlcOK39VmxXmTbuGL+e7TOb
C5Xqu0+4btHGKwoe9FSKc6GxKbIpd0wLz13W5nZShgu6VhMiJz9NnExdav1X
kQtXKr/8t9xQDb9QaNAZpHDhzlw1mShLZWz4ptttDZ0LZ8QLT83xUMJxMZPX
shhckNg7vOtliCJ2k9Kf723MBatjdy7EZcjjH/+CJzu45HqisJmznTJ4YZ96
U/0aLqjIN6+uXPG7fEe5b3j+Pi44222XfsMVR0O7Bw6uDuTCvCPpiiqWkuiQ
xq6drcFcKC8LS5DfII2ijwSsHw/lgmfO2VJ7z7kohx+sLYzkwtflLq/PGCui
fwWnSp8lcCH4yfUnlJdLUKS3RI5jIhe2m32Tyc5TRQsWnr7dfYsLny8Fndx7
XQ3pBkVHS6VzwTIxbsEWNw1kaXrRZc1DUl/V6fpkd21U/1nRtv0RF+Rm5+Wk
VWkj17jLaHc+Fz4uuBnww0AH7fp5jXq+iAtp+fPkjUZ1UNzDpNHGZ1xQy5Pc
wtilh9S3avd5VnFBe9fpNVCph9Lnp34YfcEFHffol2vV9VHh7vSnC19zYXJe
4l3D5/rIXINWkFHPBa1/ylVDyhRUW5eZxW3iwjMzY/UITwr6uPTeBdc2LghW
CEIWTFKQ9wfD8G/vuZCsoakzYk5Fw9EPDx75yAWvR077z56motkDue5Jn7nQ
tKhCt1yOhmKuM9cbd3PB3yZ6jq0NDalYF6yu6CXXjycWBEXSED2zyODzdy5k
06ILw8ZoKNdZoH3gBxf+ZY96OBvQkUCqTEn8FxcSVF1CH7nT0fMCM6kro1yI
6xvzO3OOjuy8KyYpY1wwTer58q6EjtpUVgwVTHCh+/DQTCLJQ9srn3VZ/uPC
SqWQNQ3zCRSoX/3CT4wHvnsmfYOdSd5qsiqdnMOD2mTl6q6DBDp9qvbhWUke
VO9ybX1whUDypra31WV40LJULvJ9DoESPr+6el+OB0aHerq31xBIL84+2mw+
D4qCh0xXfCLQPfOGo2/keeCgwxg49ItA7J/r921T4sH1Cz51c+YwEE5u9vqp
woPZFtO/O+UZqNNWZ2vwYh58FS7o6VRjoFkTuzf9VeWBwU7jfdb6DKSTXrwh
TIMHAv3ncqoMBlqxTspOQpsHCuvXr1lP8q/n1AaraF0e1JgavPxJxuFZySsW
UHhQyHDdN76UgdI3Dgov03jQbFES4E3ybpUYn7OEwYNFOfnmQpKve+9HLksy
4EHngq6skIUMJO3atFTPmNQ/iR/qyjIQXVKbmrmMBw+ddySy/hLIOneXtiGT
B8Wv6FP5/QTydy9SzWXzQIvYeC21hUDRspIqHB7pV9XbgFmYQNkF6xeUCnjg
PPXjWX06geo8bsmYm/HAPLJDamE0gQbnf59TBTywUF7zoXEngeaXcKdtVvLg
8EqbTzJrCGTsEzH+ZjUP6AftpctpBHJQavzlaEXGb9TLf4kRaB/WHHxnwwOh
NK0h+x0dxe3c2eu+lgf2/q8CBh/QUdMz8Xbf9TywXeiQpL6ejkYD1rUOOvKg
ROrgjJI2HSmrJ9Xvd+bBx7XocMY3GnIK5FQeceMBt+6dW2EoDb3X939wwZsH
bzOdpTTDqOhvfUGmih8P3LI2rYgTUJH60Tm3E3byIElz78aGUQra0nLzWtpe
Hjz75FRRt43k24g3YYUhPBifaDK+qKWPxJarh4qO8qA7Y9PYslo9pNvhG/T0
OA9Wbtgq93G/HvJiz/avC+fBZkMTQWC5LurtYW7oPEfOpzTo30Q6SPrSibU7
LvIgzbv4c8QHbURHry0HLvHgxpV+52dB2sj/mo9wNJ4HdqdOxFfaaKEhywSK
9G3Sr+hcyZKvamg0c2bM+DEP/k3kKt++rox6nCySzxTxwHJ+5MGwAiXUJh5r
9aWEB+2innN3GxRRyTbV61creKCcPecFc44COrmYxZ+q4UHsdMzyzLuySD7K
/0htOw/C/hMPk9McMzPwaZm1YzYf3n/Yn5KkOAdrqqhnlYvzoWGZ4fui3+JY
/pnHusVSfHgiI3SVeCuJRzSHU17K8WHgr5/56UuyuLhVduVyFT7kJMXM7hiT
x1YWEDFD44PlldLp99KLMX800nATgw/XFJfY7fm8GBukvmrJNeBDdYRY3oei
JXjBtCvVexkfmKuvZU9uV8Ot/wVV1/H54JVfGGh7RRN7UrJlEtbywQofd40W
6uKQSnd/qgMfXgnSPq27oYsv7FB8mbueD6hFQ5M9rotL0w/HvHTmQ2QBvcvo
nh5WplotmNrOhzjkPOvLX33MqPobcMaLD/WK20wu2lAweD+sV/Hhw5VpFeWF
1yh4952FcUa7SD2ClugIgoqrqN3K24L5sHT085PlpjTcXhUf9P0QH6pCiZ11
5Hn9y9u29VAoH7KLBs9J3KVhrYy8axfD+HDkzY4gs0V0zLb0Gdc4Re6nzv7N
chs6tu1V3XQ3gg/WOzOHH4bQ8SHaSdVn0XwINkjsN2mm43PVrFD7WD6wbW/k
LJ2i4zSf/g8fzvPhQa+WaqIegYulEoW+cXy40TXteMKSwA0ZDomjl/nQTJ1p
afYlcJ+l+HTYNT4cSxR3unyawNO9j93nJfAhWplfX3qbwMpRO/H1m3zQNxWE
rSkjMIOupU29xYdvPmadomYCw4vGsNwUPri1mWVcJPnKyTeyyyyND4YO1OpV
kwTeJc1f8fIOH+6ZjPlvJPnsVOZgqnMWH9S3/Rl9QvJbglXKnK/ZfIhiU6ei
SL7L6XP02vuAD+OrbrplURm4Kkq68l8OH2hPHUF3KQO300spZ/L48GKfD3WE
5MVfLwIiVQr4AN7fP6iRsbSfXm9KITn/Ez/0Jp2BNWXeWhqVkP7T6P5BugzM
yorOLC7jQ0yQhUvGEga2tTaTsazgw60qPZHpfAb26P/p1/SUD2sropxUZzHw
oTPptVsr+RAe+5jq/oPA54hNS79X82FT2d39s9oJnFYzN+ZQLR8idBxhThXp
t1/Fd/FXfOi896HZ9z6B62UC1158Q8brOnJN4wjcm0V7oNHIB9mue/HegaTf
1h/m323mw+Xe6GPijqTfA+cC2G/58DV+9LL8MtJfxh8T+3Y+OBxPW3fiCx07
1WZd/NDBBx2/JfmDhXS8y3/LL58uPsx+cbTs7Vk6jr/7PC+shw96V7q2chh0
/MDmkPK8fj5gW2Kk4DcNPx9YGnT9Gx/ueNhqviin4Z+MS+zcYT4s2iM3u8Ca
htvqYLXSCB9+Fwa9q19AwxV7hjYE/ubD9Lz+gq4mKj6Xa72PPcmHwVznf5Mb
Sd7kz7pXPEcAQ27DP+6uoGCF9vvFapICOOeTPU95Qh+PH91cc0RaAN7sDOfU
+/q46klBj9k8AeS10+2tFfSxh/VunWcLBTAzWloY8UwXW39TNdFfIgDXyoyp
Dzt1yf7lhVmEmgDW+ykyLyrq4ul6PTdLbQFwU4RLuZt18A2X91dfEgJ4sS5O
sjRfCzf7WM5tFgpgVXdO1RrjJbhE5rcqCwmgdKBOrnHDYpyanUpcNReArHVE
1rLgRXjvjykLFwsBaDx84fMyXwXPO5h/ot1eAJ4fH0vEqylii0idsa8eAjiW
/e21wUoJXJj2t+t3lAC8CuKmcnaOmLFXBo7ZnBVAqnT4u+2cMbP/ur7PTY4V
wJFu9anFYn/NcjU7ODZxAkjfdmxjpoUYuhdfEZt0QwDjsWufTmBplBwTwbN8
IIC2+V+3vU9RQppLp+1u5gigJV87b+spZZRYE+z1M1cAdJPog1RPFZQg6Xv+
xmMBcMpmdxloLEKXw2y6f1QIQFV5canKYVV0JnDBxfgmAVwTs2222aaNpJWi
7gy2CGDutsrzreXaKPLRrNIVbWR+IgNGf6vpoPChnz3f2wWwQP6QVX2DDjrm
2yw07yH1JX/ZpbFUD/2TXLv+ap8AYtdF9gYc1UOh6ZU+3wYEsFuVRlF9rYcO
fS6Iu/KD9PvNlwxXf3203+16X/+4ABqHLDe0xlLQ8KTCtNlfMn9iAZomjRQU
cD1a6fIU6ceiy1YPlaloV2uomdlsIdTJx5hIXaaigcDRDZfEheARgkab66nI
T2m3X5+kEFasfW6QS/Kmt4P75Tg5IVA6DUcjyfP761BrVu88Ifw367R4UA4N
ecbaY6G8EDg3naK2fqGhbbUw0KMsBH7FJdklK+mow7doRrBICIkpNjKdAXS0
RWq5ysUlQlg9q/rgpQQ6cl2lBwJNISw4r+f1qJ+Oppql5z/TFkL6645tSgoE
St4x9MFGTwhz3Ec8RlgEWvmnKauRIgTxbZYxa10I1BNZdNCVLoTp4rR1mocI
dGbRrdWfGUIwUXl5zIPkTYPMcCV/QyFUy15dtojkzTdc/66fxuT4J60W3gsC
7a+xf3h4uRACjb6qv/hIIBVX1lExlhAikj7P4GECFQ6orjnDEcKtC0/ytMQY
aHPorCUKfCFcbBzO6J7PQNNyPT3xQiGoO9SFyasyUMrNl/naiNzf83LFW7oM
tMrw0clMcyEIujdsuUAn+bDsqoPJKiHE0zdd+ELyZLTdEc1CCyEo/TM2jjdg
IMNP278jayHMdF9WfUDyaX2AZXH1GiGcm9Y9S6Ey0IFZhlH2dkJgmt6Sm/n/
+wEXFZ3eOghh8szKAwIVBirSGdfbukEIX71kOz9IM5Bb7sefPRtJPZUTOV0T
BJpZ8QzvcRGC7vk9YXZ9BEptyoz94yqE6DofTf1mAq32Orf52BYhjA03RHuV
Eahv9AAhuU0INksafyikEehsxKaxWA8h/EuxSTKKIpDRQlSpskMIE8d30sr8
CNRwR/9Soo8QnNplQyqsyP6AI7ud4k/6SWv5JKAQqNil5R8zQAjH4mdnZ7WS
z0N/cW3pPiE4bq0wTsumo1khyfGrAsn10vZOUI/RkcWNnUzHw2TMtVnTpkZH
/UvXzW4PFQKxc6hKvpfsh0rZ9Z7HSL9MYrd3P6Shxo9iuw6cEoLB56fHDvFp
KGhPL+9vhBAqjs1yXPGPihbP1EmdihIC7ck5dVxCRe7a8bfjYoVQph9W9s2U
rAcPow+Prglh8OiilLcyFBQ7opTFSxBCZtY6makifWQSPhH85KYQUs7XjSzw
1UfB6c8VG1LI5+NjP9Ys10Oz+1xthrOFIGu/t/LVel2ktvt0kVGFEEJ3mLW6
rNVE52a8WWefCqHWceu8oJMaaHacxaPe50KwMhiunc5XRwMFElnJNUJ4G811
TVVUQ8WzwuMVm8h6eyUx1zh3EXK9HHbwT7cQqva/CzO4JI/iSw6zyuVEoC2d
fuVrcqvZXLtNj1Tnk/Fte8MXhaVmYZ1cw4PyIog6+qkOoivKfSXG9U1URLA6
XGSueflLOcc+WDlVUwROsrlf040myls/7x+JWCaChZ/m1qaXymGboPUBn01F
YLW9JoQePw+XSy3/ZsYWwby15X0L9y3Adwx+fh7ji6Al5DbDOlYBBwcHNPqt
EkHis6VRNXoqWEV216O1zuT9l/h7XR5Rw2krj4YMbxKBM0p95fZBHS8/em7l
JTcRSL+0XDWnQgPbDee0tG0XwSXNMvbp41o4svX3hOcuETwdOZTk6a+DleWl
nkkGiCDt8/0ru+t1cKr14pisfaQ+Uc7mKKYuxqV8zR/BIvAd+eZY+UcXj6ce
XxFyQgTvWdemBB76OLL9gpxGuAgkYtd0Zj3Wx8oLU5txpAhGdvgqtMlSsMmZ
594SMSII3zUlte4uBZc/bTHOPCcCyzfPraP/ULDtv55xm4siuPPmVvc2oGK/
AJmzF66K4OrW+NCqOioez1R1NL0ugm/VuS4W5Hke+XmpRusN0p+Uk+tX29Nw
6ka7h2opIlCafB2YXk3DJue3Hiq/LYJdNk15EzM0XP5ir/n2OyKQaVrFy2PR
8XvBpaY72SLoqAqfh67TsW9Q2k3rByKQo/btlaym4z8P/tvxPUcEmdql5hq/
6Di8r8rofJ4IAn23PTymSmBF3baxZQUikMQPV1CBwMmb+yuaC0UQ7ZfUvsCT
wEZXJs8cLBHBr+Kd+ZxTBC59LbdBtVwE6qptGxOSCbxGWkO9rEIEs6U332KW
EPi9uVH31mdkPiibKuY0Edg3FD2YXUXq47tyJEge/ZPvcDD9hQj2CVA9m+TR
8KHtYPVSBBy7Q6lXSR5VpB+Q+fZKBM8b+Qv0FjJw8vbwxth6Mp8+j/F7kkeN
bly5YdJE+j9sf7uU5NHS5jteTS0i2HLz1WA1g4Ft5hcaBreJ4FruG5V/JJ+2
Wdb8WfyBzLd7U4cLOe594j0u+SgCl8WXd3ZQGHi0+FuUe6cIDult4MVqMvDJ
0X/rxL6IoEmiX9VbmYHljearpXWLwP2qOdNfioGTfLS+WvSJYFS27XfCGIEN
U0zu9w+IACRNF09+Jf15bx4cMyiCavf4+DNvCGyjvAEZD4tgyErm+ZrHBG5b
6yXd+EsEy8OOC1beJLD36aCGwN8iWHX239D+YwQerYhMWDQugmdRweodWwh8
cvKaZ/EkWU+r39pF8Qksz8wy2DJF1p/DX7cgZQIn7S7+PTND3k/pkW/WNzr+
H3DHEuI=
        "]]}}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{Automatic, 240.67984008299533`},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
      AbsolutePointSize[6], "ScalingFunctions" -> None, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
           Part[#, 1]], 
          (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
           Part[#, 1]], 
          (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 30}, {-0.00020000651790595385`, 0.0001999999999998498}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}], ",", 
   GraphicsBox[{{{}, {}, 
      {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
       Opacity[1.], LineBox[CompressedData["
1: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
2z9O1LyjYvlDr1znf+uAp9H797W/qFjliILtxiEd2Newu/wxlYq1PG7sFB7T
AY5Ux1++gjRMOr6uQ5jWgbs8LzCHKg0b+56U37qgA185Yi5GbafhnSd/bbak
6UDl1Z1vGmxo2DTYivXQmg4U27HeGThEw3vOvCH7btCF7wtRXV+8aNguXGn0
PIcunL3yrj7Kj4YPRN7qusarC08cpkjrTH+7RjMa7wvqwm6ntwl7mP72vHzq
famoLnTN/Sl396dhn6u9pdWSzPmUu43hOA2fTLbObpLTBZL1WbUZFxoOuVGZ
2k/QhUnJO3IB+2j4XJpyzKy6Llz0TbWu2EnDURlpp1l0daHM47x7pwYNxz3Y
cHyzgS5sZJfP+yZCw4kPgw8obtMFXpWVwXurVJz6+LeF/i5dMImsO281QMXp
hXuNzM104bcQr1k3puJ7pe/UnPfownG+4kLHbCrOeaEq6bNPF4RPlN18F07F
+a/u8Ibv14Vbm88FiNlT8cuq0zOZbrpwzC1U/juZgivwwECxly5w/423JdVR
cHXdvrb3Prpg+1if7VkqBX/5rv66L4QZz8OHPSwyFPyjJePJ9FldOG1BoE0N
kHF7B3sG/YIu5LmeuCOU+//fJ/yNkL+iCxH0RwsGW8h4eMD+JDFJF8b/dq1Y
tS7iiaEaN9MbzPzZ7QQ/XlnElMl76MQ9Xdi2brIqOr6A+dYc2Yue6cIsa7N1
2e15LMTygfq2XBf2qELmYaN5vIVNZ+xrpS4ARUGn5dccVuLj+T75URf0TvD8
Pb5lDm+X/nRT96cu1GZMkNNXp/CgEqF/vEcX9jsNsF/Wn8LXNBM08wd0gadN
ezDYbxJ3b7f5vGVcF7JcontKv47jcJf21Q1runC7n+dMVOAodt17Wn9CUA/6
wG/OPr2fWX/F5lQb6kHMTyXdeV9fHJBCapDYpgfb8y8erF18gHbdHJo8t0MP
eImidzn9n6GRDIttRNCDu67mv7fL1SKDQu7/nljrgY2d65sUv2bU3nCL+4ab
Hgy8qd8XuKcfCbDmhXnF6UHBxPz1gJ3TiGMZO83H60Gb63hJpcIMos/8JsVe
1YNbIq0zhayzaLZHYj43RQ8mjqsty3vOodbyW6f+3GXGK7Hf9Db/AmosemEb
ck8P9Cr4ZYrOLqAPOU2aLFl6IJPxT9q7bwGVJXFPyD3Sg/dDzep1TxbR7WOx
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
        "]]}}, {}, {}},
    AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
    Axes->{True, True},
    AxesLabel->{None, None},
    AxesOrigin->{0, 0},
    DisplayFunction->Identity,
    Frame->{{False, False}, {False, False}},
    FrameLabel->{{None, None}, {None, None}},
    FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
    GridLines->{None, None},
    GridLinesStyle->Directive[
      GrayLevel[0.5, 0.4]],
    ImagePadding->All,
    ImageSize->{395.2, Automatic},
    Method->{
     "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
      AbsolutePointSize[6], "ScalingFunctions" -> None, 
      "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
          (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
           Part[#, 1]], 
          (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
           Part[#, 2]]}& ), "CopiedValueFunction" -> ({
          (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
           Part[#, 1]], 
          (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
           Part[#, 2]]}& )}},
    PlotRange->{{0, 30}, {-1.4640015742325008`, 1.9998001716162377`}},
    PlotRangeClipping->True,
    PlotRangePadding->{{
       Scaled[0.02], 
       Scaled[0.02]}, {
       Scaled[0.05], 
       Scaled[0.05]}},
    Ticks->{Automatic, Automatic}]}], "}"}]], "Output",
 CellChangeTimes->{3.7141963336782427`*^9, 3.714196740066942*^9, 
  3.714196911101251*^9, 3.714197010752571*^9, 3.7141985613855653`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{
     "first", " ", "plot", " ", "is", " ", "for", " ", "x", " ", "close", " ",
       "to"}], " ", "-", 
     RowBox[{
      RowBox[{"b", "/", "2"}], "a"}]}], ",", " ", 
    RowBox[{
     RowBox[{"second", " ", "and", " ", "third", " ", "for"}], " ", "|", "x", 
     "|", 
     RowBox[{
      RowBox[{
       RowBox[{"<<", " ", "b"}], "/", "2"}], "a", " ", "and", " ", "last", 
      " ", "for", " ", "x", " ", "close", " ", "to", " ", 
      RowBox[{"b", "/", "2"}], "a"}]}]}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{"close", " ", "to", " ", "0"}], ",", " ", 
    RowBox[{
    "the", " ", "potential", " ", "curve", " ", "can", " ", "be", " ", 
     "approximated", " ", "as", " ", "a", " ", "parabola", " ", "and", " ", 
     "the", " ", "motion", " ", "is", " ", "nearly", " ", "SHM"}]}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{"for", " ", "x"}], "=", 
     RowBox[{
      RowBox[{
       RowBox[{"-", "b"}], "/", "2"}], "a"}]}], ",", " ", 
    RowBox[{
    "the", " ", "time", " ", "perod", " ", "goes", " ", "to", " ", 
     "\[Infinity]", " ", "as", " ", "the", " ", "potential", " ", "at", " ", 
     RowBox[{"(", 
      RowBox[{
       RowBox[{
        RowBox[{"-", "b"}], "/", "2"}], "a"}], ")"}], " ", "is", " ", "equal",
      " ", "to", " ", "the", " ", "potential", " ", "at", " ", 
     RowBox[{"b", "/", "a"}], " ", "which", " ", "is", " ", "an", " ", 
     "equilibrium", " ", 
     RowBox[{"point", ".", " ", "thus"}], " ", "the", " ", "particle", " ", 
     "will", " ", "stop", " ", "after", " ", "reaching", " ", 
     RowBox[{"b", "/", "a"}]}]}], "*)"}]}]], "Input",
 CellChangeTimes->{{3.7143908450126677`*^9, 3.714390857600444*^9}, {
  3.714390930357585*^9, 3.714391002512042*^9}, {3.71439128517188*^9, 
  3.714391452088336*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"U", "[", "x_", "]"}], "=", 
  RowBox[{"-", 
   RowBox[{
    SubsuperscriptBox["\[Integral]", "0", "x"], 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"a", "*", 
        SuperscriptBox["u", "2"]}], "-", 
       RowBox[{"b", "*", "u"}]}], ")"}], 
     RowBox[{"\[DifferentialD]", "u"}]}]}]}]}]], "Input",
 CellChangeTimes->{{3.71419713950624*^9, 3.7141972104578238`*^9}, {
  3.7142246031029468`*^9, 3.7142246098061433`*^9}}],

Cell[BoxData[
 RowBox[{
  FractionBox[
   RowBox[{"b", " ", 
    SuperscriptBox["x", "2"]}], "2"], "-", 
  FractionBox[
   RowBox[{"a", " ", 
    SuperscriptBox["x", "3"]}], "3"]}]], "Output",
 CellChangeTimes->{{3.714197194200571*^9, 3.714197211353467*^9}, 
   3.71439146855511*^9}]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"U", "[", 
   RowBox[{
    RowBox[{"b", "/", "2"}], "a"}], "]"}], "/.", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"a", "\[Rule]", "1"}], ",", 
    RowBox[{"b", "\[Rule]", "4"}]}], "}"}]}]], "Input",
 CellChangeTimes->{{3.714391470580546*^9, 3.7143914936081553`*^9}}],

Cell[BoxData[
 FractionBox["16", "3"]], "Output",
 CellChangeTimes->{3.71439149398742*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{"b", "/", "2"}], "a", " ", "is", " ", "an", " ", "inflection", " ",
    "point"}], "*)"}]], "Input",
 CellChangeTimes->{{3.7143915040334625`*^9, 3.714391522178323*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"U", "[", "x", "]"}], "/.", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"a", "\[Rule]", "1"}], ",", 
      RowBox[{"b", "\[Rule]", "4"}]}], "}"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"x", ",", 
     RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.714197900541425*^9, 3.714197945380104*^9}, {
  3.714198149307173*^9, 3.714198158888966*^9}}],

Cell[BoxData[
 GraphicsBox[{{{}, {}, 
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
      "]]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  ImageSize->{456.7999999999978, Automatic},
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Part[{{Identity, Identity}, {Identity, Identity}}, 1, 2][#]& )[
         Part[#, 1]], 
        (Part[{{Identity, Identity}, {Identity, Identity}}, 2, 2][#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-10, 10}, {-133.33330884353876`, 367.8818102248051}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{{3.7141979189173636`*^9, 3.7141979478448515`*^9}}]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.714198688814473*^9, 3.714198692518078*^9}}],

Cell[BoxData[
 RowBox[{
  RowBox[{"V", "[", "x_", "]"}], ":=", 
  RowBox[{
   RowBox[{
    RowBox[{"-", "a"}], " ", 
    FractionBox[
     SuperscriptBox["x", "2"], "2"]}], "+", 
   RowBox[{"b", " ", 
    FractionBox[
     SuperscriptBox["x", "4"], "4"]}]}]}]], "Input",
 CellChangeTimes->{{3.7141986891516867`*^9, 3.7141986898501873`*^9}, {
  3.7141987557976227`*^9, 3.7141988136064796`*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Plot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"V", "[", "x", "]"}], "/.", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"a", "\[Rule]", "\[Alpha]"}], ",", 
        RowBox[{"b", "\[Rule]", "\[Beta]"}]}], "}"}]}], ",", 
     RowBox[{"{", 
      RowBox[{"x", ",", 
       RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", 
     RowBox[{"-", "3"}], ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Beta]", ",", ".1", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7141988237766886`*^9, 3.71419893284657*^9}, {
  3.714198996590872*^9, 3.714198998012553*^9}, {3.7141990644369016`*^9, 
  3.7141990951024475`*^9}, {3.7141991252486777`*^9, 3.7141991258821526`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`\[Alpha]$$ = 
    2.4400000000000004`, $CellContext`\[Beta]$$ = 0.1, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{
      Hold[$CellContext`\[Alpha]$$], -3, 3}, {
      Hold[$CellContext`\[Beta]$$], 0.1, 1}}, Typeset`size$$ = {
    450., {137., 143.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`\[Alpha]$68748$$ = 
    0, $CellContext`\[Beta]$68749$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`\[Alpha]$$ = -3, $CellContext`\[Beta]$$ = 
        0.1}, "ControllerVariables" :> {
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$68748$$, 0], 
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$68749$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> Plot[
        ReplaceAll[
         $CellContext`V[$CellContext`x], {$CellContext`a -> $CellContext`\
\[Alpha]$$, $CellContext`b -> $CellContext`\[Beta]$$}], {$CellContext`x, -10, 
         10}], "Specifications" :> {{$CellContext`\[Alpha]$$, -3, 
         3}, {$CellContext`\[Beta]$$, 0.1, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{511., {206., 213.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7141988821173325`*^9, 3.714198895957138*^9}, 
   3.7141989336681485`*^9, 3.7141989987100196`*^9, {3.7141990675631123`*^9, 
   3.7141990960240927`*^9}, 3.7141991268398046`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
    RowBox[{"when", " ", "a"}], "<", "0"}], ",", " ", 
   RowBox[{"only", " ", "a", " ", "single", " ", "well", " ", "exists"}], ",",
    " ", 
   RowBox[{
   "the", " ", "double", " ", "well", " ", "is", " ", "formed", " ", "when", 
    " ", "a", " ", "crosses", " ", "0"}]}], "*)"}]], "Input",
 CellChangeTimes->{{3.7143916546458225`*^9, 3.7143916898713217`*^9}, {
  3.714391789237857*^9, 3.714391791000107*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.714199623056773*^9, 3.714199628112357*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7141996233880067`*^9, 3.714199626293062*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", "=", 
       RowBox[{
        RowBox[{"NDSolve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"v", "[", "t", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"m", "*", 
               RowBox[{
                RowBox[{"v", "'"}], "[", "t", "]"}]}], "\[Equal]", 
              RowBox[{"-", 
               RowBox[{
                RowBox[{"V", "'"}], "[", 
                RowBox[{"x", "[", "t", "]"}], "]"}]}]}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"a", "\[Rule]", "\[Alpha]"}], ",", 
               RowBox[{"b", "\[Rule]", "\[Beta]"}]}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"x", "[", "0", "]"}], "\[Equal]", 
             RowBox[{"p", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "0", "]"}], "\[Equal]", 
             RowBox[{"p", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "[", "t", "]"}], ",", 
            RowBox[{"v", "[", "t", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "0", ",", "time"}], "}"}]}], "]"}], "/.", 
        RowBox[{"m", "\[Rule]", "1"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"Evaluate", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"v", "[", "t", "]"}]}], "}"}], "/.", "y"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "time"}], "}"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "}"}]}]}], "]"}]}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "4"}], "}"}]}], "}"}], ",", "Locator"}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"time", ",", "20"}], "}"}], ",", "0.", ",", "50"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Beta]", ",", "0.1", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.714199631661873*^9, 3.714200141028751*^9}, {
  3.7142003829807653`*^9, 3.714200384817067*^9}, {3.7142004225321655`*^9, 
  3.7142004262407656`*^9}, {3.714200457295062*^9, 3.7142004717983413`*^9}, {
  3.714201468533775*^9, 3.7142014946772804`*^9}, {3.714201728148807*^9, 
  3.7142017784091396`*^9}, {3.714202177248191*^9, 3.7142021774002733`*^9}, {
  3.714202521467392*^9, 3.714202523995185*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`p$$ = {-0.9000000000000004, 
    2.0999999999999996`}, $CellContext`time$$ = 20, $CellContext`\[Alpha]$$ = 
    3.64, $CellContext`\[Beta]$$ = 0.20500000000000002`, Typeset`show$$ = 
    True, Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`p$$], {2, 4}}, Automatic}, {{
       Hold[$CellContext`time$$], 20}, 0., 50}, {
      Hold[$CellContext`\[Alpha]$$], 0, 10}, {
      Hold[$CellContext`\[Beta]$$], 0.1, 1}}, Typeset`size$$ = {
    450., {221., 227.}}, Typeset`update$$ = 0, Typeset`initDone$$, 
    Typeset`skipInitDone$$ = True, $CellContext`time$449516$$ = 
    0, $CellContext`\[Alpha]$449517$$ = 0, $CellContext`\[Beta]$449518$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`p$$ = {2, 4}, $CellContext`time$$ = 
        20, $CellContext`\[Alpha]$$ = 0, $CellContext`\[Beta]$$ = 0.1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`time$$, $CellContext`time$449516$$, 0], 
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$449517$$, 0], 
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$449518$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`y$ = ReplaceAll[
           
           NDSolve[{
            Derivative[
              1][$CellContext`x][$CellContext`t] == \
$CellContext`v[$CellContext`t], 
             
             ReplaceAll[$CellContext`m 
               Derivative[1][$CellContext`v][$CellContext`t] == -
               Derivative[1][$CellContext`V][
                 $CellContext`x[$CellContext`t]], {$CellContext`a -> \
$CellContext`\[Alpha]$$, $CellContext`b -> $CellContext`\[Beta]$$}], \
$CellContext`x[0] == Part[$CellContext`p$$, 1], $CellContext`v[0] == 
             Part[$CellContext`p$$, 2]}, {
             $CellContext`x[$CellContext`t], 
             $CellContext`v[$CellContext`t]}, {$CellContext`t, 
             0, $CellContext`time$$}], $CellContext`m -> 1]}, 
        ParametricPlot[
         Evaluate[
          ReplaceAll[{
            $CellContext`x[$CellContext`t], 
            $CellContext`v[$CellContext`t]}, $CellContext`y$]], \
{$CellContext`t, 0, $CellContext`time$$}, 
         PlotRange -> {{-10, 10}, {-10, 10}}]], 
      "Specifications" :> {{{$CellContext`p$$, {2, 4}}, Automatic, 
         ControlType -> Locator}, {{$CellContext`time$$, 20}, 0., 
         50}, {$CellContext`\[Alpha]$$, 0, 10}, {$CellContext`\[Beta]$$, 0.1, 
         1}}, "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{519., {308., 315.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{
  3.7142001418372984`*^9, 3.714200386242052*^9, 3.7142004266731033`*^9, 
   3.7142004726759615`*^9, {3.7142014862382936`*^9, 3.714201495741036*^9}, {
   3.714201730325321*^9, 3.7142017790726185`*^9}, 3.714202178576109*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
    "here", " ", "the", " ", "separatrix", " ", "is", " ", "at", " ", "E"}], 
    "=", 
    RowBox[{
    "0.", " ", "if", " ", "the", " ", "total", " ", "energy", " ", "of", " ", 
     "the", " ", "system", " ", "is", " ", "greater", " ", "than", " ", "0", 
     " ", "the", " ", "orbits", " ", "will", " ", "traverse", " ", "both", 
     " ", "potential", " ", "wells", " ", "and", " ", "if", " ", "they", " ", 
     "are", " ", "less", " ", "than", " ", "0", " ", "they", " ", "will", " ",
      "be", " ", "bound", " ", "to", " ", "a", " ", "single", " ", 
     "potential", " ", "well"}]}], "*)"}], "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.7143925112799487`*^9, 3.714392600564973*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", "=", 
       RowBox[{
        RowBox[{"NDSolve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"v", "[", "t", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"m", "*", 
               RowBox[{
                RowBox[{"v", "'"}], "[", "t", "]"}]}], "\[Equal]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{
                 RowBox[{"V", "'"}], "[", 
                 RowBox[{"x", "[", "t", "]"}], "]"}]}], "-", 
               RowBox[{"k", "*", 
                RowBox[{"v", "[", "t", "]"}]}]}]}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"a", "\[Rule]", "\[Alpha]"}], ",", 
               RowBox[{"b", "\[Rule]", "\[Beta]"}]}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"x", "[", "0", "]"}], "\[Equal]", 
             RowBox[{"p", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "0", "]"}], "\[Equal]", 
             RowBox[{"p", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "[", "t", "]"}], ",", 
            RowBox[{"v", "[", "t", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "0", ",", "time"}], "}"}]}], "]"}], "/.", 
        RowBox[{"m", "\[Rule]", "1"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"Evaluate", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"v", "[", "t", "]"}]}], "}"}], "/.", "y"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "time"}], "}"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "15"}], ",", "15"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "15"}], ",", "15"}], "}"}]}], "}"}]}]}], "]"}]}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "2"}], "}"}]}], "}"}], ",", "Locator"}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"time", ",", "20"}], "}"}], ",", "0", ",", "50"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Alpha]", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\[Beta]", ",", "0.1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"k", ",", "0", ",", "1"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.714201611254942*^9, 3.714201625402963*^9}, {
  3.714201659722312*^9, 3.7142016627844553`*^9}, {3.7142016944599037`*^9, 
  3.7142017157980323`*^9}, {3.7142017992499046`*^9, 3.7142017999614067`*^9}, {
  3.714202047384108*^9, 3.714202050218117*^9}, {3.7142021010571737`*^9, 
  3.7142021072645736`*^9}, {3.714202166878815*^9, 3.714202167337147*^9}, {
  3.714202508289052*^9, 3.7142025120407133`*^9}, {3.7142026767743425`*^9, 
  3.714202712167445*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`k$$ = 
    0.343, $CellContext`p$$ = {-5.039999999999999, 
    9.850000000000001}, $CellContext`time$$ = 20, $CellContext`\[Alpha]$$ = 
    2.63, $CellContext`\[Beta]$$ = 0.649, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`p$$], {2, 2}}, Automatic}, {{
       Hold[$CellContext`time$$], 20}, 0, 50}, {
      Hold[$CellContext`\[Alpha]$$], 0, 10}, {
      Hold[$CellContext`\[Beta]$$], 0.1, 1}, {
      Hold[$CellContext`k$$], 0, 1}}, Typeset`size$$ = {450., {221., 227.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`time$504678$$ = 0, $CellContext`\[Alpha]$504679$$ = 
    0, $CellContext`\[Beta]$504680$$ = 0, $CellContext`k$504681$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`k$$ = 
        0, $CellContext`p$$ = {2, 2}, $CellContext`time$$ = 
        20, $CellContext`\[Alpha]$$ = 0, $CellContext`\[Beta]$$ = 0.1}, 
      "ControllerVariables" :> {
        Hold[$CellContext`time$$, $CellContext`time$504678$$, 0], 
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$504679$$, 0], 
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$504680$$, 0], 
        Hold[$CellContext`k$$, $CellContext`k$504681$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`y$ = ReplaceAll[
           
           NDSolve[{
            Derivative[
              1][$CellContext`x][$CellContext`t] == \
$CellContext`v[$CellContext`t], 
             
             ReplaceAll[$CellContext`m 
               Derivative[1][$CellContext`v][$CellContext`t] == -
                Derivative[1][$CellContext`V][
                  $CellContext`x[$CellContext`t]] - $CellContext`k$$ \
$CellContext`v[$CellContext`t], {$CellContext`a -> $CellContext`\[Alpha]$$, \
$CellContext`b -> $CellContext`\[Beta]$$}], $CellContext`x[0] == 
             Part[$CellContext`p$$, 1], $CellContext`v[0] == 
             Part[$CellContext`p$$, 2]}, {
             $CellContext`x[$CellContext`t], 
             $CellContext`v[$CellContext`t]}, {$CellContext`t, 
             0, $CellContext`time$$}], $CellContext`m -> 1]}, 
        ParametricPlot[
         Evaluate[
          ReplaceAll[{
            $CellContext`x[$CellContext`t], 
            $CellContext`v[$CellContext`t]}, $CellContext`y$]], \
{$CellContext`t, 0, $CellContext`time$$}, 
         PlotRange -> {{-15, 15}, {-15, 15}}]], 
      "Specifications" :> {{{$CellContext`p$$, {2, 2}}, Automatic, 
         ControlType -> Locator}, {{$CellContext`time$$, 20}, 0, 
         50}, {$CellContext`\[Alpha]$$, 0, 10}, {$CellContext`\[Beta]$$, 0.1, 
         1}, {$CellContext`k$$, 0, 1}}, "Options" :> {}, 
      "DefaultOptions" :> {}],
     ImageSizeCache->{519., {323., 330.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{{3.7142017036324034`*^9, 3.714201716468517*^9}, 
   3.714202051012685*^9, 3.7142021080801706`*^9, 3.714202172577854*^9, {
   3.7142026909724007`*^9, 3.714202713255194*^9}}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", 
  RowBox[{
   RowBox[{
   "by", " ", "varying", " ", "the", " ", "intial", " ", "conditions", " ", 
    "through", " ", "the", " ", "locator", " ", "in", " ", "the", " ", 
    "plot"}], ",", " ", 
   RowBox[{
   "we", " ", "can", " ", "see", " ", "that", " ", "whenever", " ", "a", " ", 
    "part", " ", "of", " ", "the", " ", "orbit", " ", "approaches", " ", 
    "the", " ", "origin", " ", 
    RowBox[{"(", 
     RowBox[{
     "or", " ", "approaches", " ", "the", " ", "separatrix", " ", "lines"}], 
     ")"}], " ", "the", " ", "well", " ", "into", " ", "which", " ", "the", 
    " ", "particle", " ", "falls", " ", "is", " ", "switched"}]}], 
  "*)"}]], "Input",
 CellChangeTimes->{{3.7143926082312274`*^9, 3.7143927140491624`*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.71420237498009*^9, 3.714202378945901*^9}}],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.7142023752432766`*^9, 3.71420237599581*^9}}],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Manipulate", "[", 
  RowBox[{
   RowBox[{"Module", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"y", "=", 
       RowBox[{
        RowBox[{"NDSolve", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{
             RowBox[{
              RowBox[{"x", "'"}], "[", "t", "]"}], "\[Equal]", 
             RowBox[{"v", "[", "t", "]"}]}], ",", "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{
              RowBox[{"m", "*", 
               RowBox[{
                RowBox[{"v", "'"}], "[", "t", "]"}]}], "\[Equal]", 
              RowBox[{
               RowBox[{"-", 
                RowBox[{
                 RowBox[{"V", "'"}], "[", 
                 RowBox[{"x", "[", "t", "]"}], "]"}]}], "-", 
               RowBox[{"k", "*", 
                RowBox[{"v", "[", "t", "]"}]}], "+", 
               RowBox[{"A", " ", 
                RowBox[{"Cos", "[", 
                 RowBox[{"\[Omega]", " ", "t"}], "]"}]}]}]}], "/.", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"a", "\[Rule]", "\[Alpha]"}], ",", 
               RowBox[{"b", "\[Rule]", "\[Beta]"}]}], "}"}]}], ",", 
            "\[IndentingNewLine]", 
            RowBox[{
             RowBox[{"x", "[", "0", "]"}], "\[Equal]", 
             RowBox[{"p", "[", 
              RowBox[{"[", "1", "]"}], "]"}]}], ",", 
            RowBox[{
             RowBox[{"v", "[", "0", "]"}], "\[Equal]", 
             RowBox[{"p", "[", 
              RowBox[{"[", "2", "]"}], "]"}]}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"x", "[", "t", "]"}], ",", 
            RowBox[{"v", "[", "t", "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{"t", ",", "0", ",", "time"}], "}"}]}], "]"}], "/.", 
        RowBox[{"m", "\[Rule]", "1"}]}]}], "}"}], ",", "\[IndentingNewLine]", 
     RowBox[{"ParametricPlot", "[", 
      RowBox[{
       RowBox[{"Evaluate", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{
           RowBox[{"x", "[", "t", "]"}], ",", 
           RowBox[{"v", "[", "t", "]"}]}], "}"}], "/.", "y"}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"t", ",", "0", ",", "time"}], "}"}], ",", 
       RowBox[{"PlotRange", "\[Rule]", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "10"}], ",", "10"}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "10"}], ",", "10"}], "}"}]}], "}"}]}]}], "]"}]}], 
    "]"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"p", ",", 
       RowBox[{"{", 
        RowBox[{"2", ",", "3"}], "}"}]}], "}"}], ",", "Locator"}], "}"}], ",",
    "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"time", ",", "25"}], "}"}], ",", "0.01", ",", "50"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Alpha]", ",", "3"}], "}"}], ",", "0", ",", "10"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Beta]", ",", "0.3"}], "}"}], ",", "0.1", ",", "1"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"\[Omega]", ",", "Pi"}], "}"}], ",", "0", ",", 
     RowBox[{"3", "Pi"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"k", ",", "0.3"}], "}"}], ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"A", ",", "0", ",", "3"}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.7142024241585684`*^9, 3.714202448513695*^9}, {
  3.714202480547397*^9, 3.714202501176013*^9}, {3.714202547886115*^9, 
  3.714202657246502*^9}, {3.7142027505936565`*^9, 3.7142027575455804`*^9}, {
  3.714202885521913*^9, 3.7142028903283405`*^9}}],

Cell[BoxData[
 TagBox[
  StyleBox[
   DynamicModuleBox[{$CellContext`A$$ = 1.805, $CellContext`k$$ = 
    0.146, $CellContext`p$$ = {2.630000000000001, 
    0.019999999999999574`}, $CellContext`time$$ = 
    25, $CellContext`\[Alpha]$$ = 3, $CellContext`\[Beta]$$ = 
    0.3, $CellContext`\[Omega]$$ = Pi, Typeset`show$$ = True, 
    Typeset`bookmarkList$$ = {}, Typeset`bookmarkMode$$ = "Menu", 
    Typeset`animator$$, Typeset`animvar$$ = 1, Typeset`name$$ = 
    "\"untitled\"", Typeset`specs$$ = {{{
       Hold[$CellContext`p$$], {2, 3}}, Automatic}, {{
       Hold[$CellContext`time$$], 25}, 0.01, 50}, {{
       Hold[$CellContext`\[Alpha]$$], 3}, 0, 10}, {{
       Hold[$CellContext`\[Beta]$$], 0.3}, 0.1, 1}, {{
       Hold[$CellContext`\[Omega]$$], Pi}, 0, 3 Pi}, {{
       Hold[$CellContext`k$$], 0.3}, 0, 1}, {
      Hold[$CellContext`A$$], 0, 3}}, Typeset`size$$ = {450., {221., 227.}}, 
    Typeset`update$$ = 0, Typeset`initDone$$, Typeset`skipInitDone$$ = 
    True, $CellContext`time$556438$$ = 0, $CellContext`\[Alpha]$556439$$ = 
    0, $CellContext`\[Beta]$556440$$ = 0, $CellContext`\[Omega]$556441$$ = 
    0, $CellContext`k$556442$$ = 0, $CellContext`A$556443$$ = 0}, 
    DynamicBox[Manipulate`ManipulateBoxes[
     1, StandardForm, 
      "Variables" :> {$CellContext`A$$ = 0, $CellContext`k$$ = 
        0.3, $CellContext`p$$ = {2, 3}, $CellContext`time$$ = 
        25, $CellContext`\[Alpha]$$ = 3, $CellContext`\[Beta]$$ = 
        0.3, $CellContext`\[Omega]$$ = Pi}, "ControllerVariables" :> {
        Hold[$CellContext`time$$, $CellContext`time$556438$$, 0], 
        Hold[$CellContext`\[Alpha]$$, $CellContext`\[Alpha]$556439$$, 0], 
        Hold[$CellContext`\[Beta]$$, $CellContext`\[Beta]$556440$$, 0], 
        Hold[$CellContext`\[Omega]$$, $CellContext`\[Omega]$556441$$, 0], 
        Hold[$CellContext`k$$, $CellContext`k$556442$$, 0], 
        Hold[$CellContext`A$$, $CellContext`A$556443$$, 0]}, 
      "OtherVariables" :> {
       Typeset`show$$, Typeset`bookmarkList$$, Typeset`bookmarkMode$$, 
        Typeset`animator$$, Typeset`animvar$$, Typeset`name$$, 
        Typeset`specs$$, Typeset`size$$, Typeset`update$$, Typeset`initDone$$,
         Typeset`skipInitDone$$}, "Body" :> 
      Module[{$CellContext`y$ = ReplaceAll[
           
           NDSolve[{
            Derivative[
              1][$CellContext`x][$CellContext`t] == \
$CellContext`v[$CellContext`t], 
             
             ReplaceAll[$CellContext`m 
               Derivative[1][$CellContext`v][$CellContext`t] == -
                Derivative[1][$CellContext`V][
                  $CellContext`x[$CellContext`t]] - $CellContext`k$$ \
$CellContext`v[$CellContext`t] + $CellContext`A$$ 
                Cos[$CellContext`\[Omega]$$ $CellContext`t], {$CellContext`a -> \
$CellContext`\[Alpha]$$, $CellContext`b -> $CellContext`\[Beta]$$}], \
$CellContext`x[0] == Part[$CellContext`p$$, 1], $CellContext`v[0] == 
             Part[$CellContext`p$$, 2]}, {
             $CellContext`x[$CellContext`t], 
             $CellContext`v[$CellContext`t]}, {$CellContext`t, 
             0, $CellContext`time$$}], $CellContext`m -> 1]}, 
        ParametricPlot[
         Evaluate[
          ReplaceAll[{
            $CellContext`x[$CellContext`t], 
            $CellContext`v[$CellContext`t]}, $CellContext`y$]], \
{$CellContext`t, 0, $CellContext`time$$}, 
         PlotRange -> {{-10, 10}, {-10, 10}}]], 
      "Specifications" :> {{{$CellContext`p$$, {2, 3}}, Automatic, 
         ControlType -> Locator}, {{$CellContext`time$$, 25}, 0.01, 
         50}, {{$CellContext`\[Alpha]$$, 3}, 0, 
         10}, {{$CellContext`\[Beta]$$, 0.3}, 0.1, 
         1}, {{$CellContext`\[Omega]$$, Pi}, 0, 3 
         Pi}, {{$CellContext`k$$, 0.3}, 0, 1}, {$CellContext`A$$, 0, 3}}, 
      "Options" :> {}, "DefaultOptions" :> {}],
     ImageSizeCache->{519., {352., 359.}},
     SingleEvaluation->True],
    Deinitialization:>None,
    DynamicModuleValues:>{},
    SynchronousInitialization->True,
    UndoTrackedVariables:>{Typeset`show$$, Typeset`bookmarkMode$$},
    UnsavedVariables:>{Typeset`initDone$$},
    UntrackedVariables:>{Typeset`size$$}], "Manipulate",
   Deployed->True,
   StripOnInput->False],
  Manipulate`InterpretManipulate[1]]], "Output",
 CellChangeTimes->{3.7142026585514193`*^9, 3.7142027621588483`*^9, 
  3.7142028929841957`*^9}]
}, Open  ]],

Cell[BoxData[
 RowBox[{"(*", " ", 
  RowBox[{
  "by", " ", "adding", " ", "forcing", " ", "we", " ", "can", " ", "achieve", 
   " ", "sustained", " ", "oscillations", " ", 
   RowBox[{"(", 
    RowBox[{"elliptical", " ", "phase", " ", "space", " ", "plot"}], ")"}], 
   " ", 
   RowBox[{"(", 
    RowBox[{
     RowBox[{"when", " ", 
      RowBox[{
       RowBox[{"x", "'"}], "[", "0", "]"}]}], "=", 
     RowBox[{"0", " ", "and", " ", 
      RowBox[{"x", "[", "0", "]"}], " ", "is", " ", "some", " ", 
      SubscriptBox["x", "0"]}]}], ")"}], "but", " ", "only", " ", "for", " ", 
   "very", " ", "specific", " ", "initial", " ", "conditions", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"when", " ", 
       RowBox[{
        RowBox[{"x", "'"}], "[", "0", "]"}]}], "=", 
      RowBox[{"0", " ", "and", " ", 
       RowBox[{"x", "[", "0", "]"}], " ", "is", " ", "some", " ", 
       SubscriptBox["x", "0"]}]}], ")"}], ".", " ", "otherwise"}], " ", "the",
    " ", "orbit", " ", "is", " ", "disordered"}], "*)"}]], "Input",
 CellChangeTimes->{{3.714392759010358*^9, 3.7143929602920957`*^9}}]
},
WindowSize->{1366, 685},
WindowMargins->{{-8, Automatic}, {Automatic, -8}},
Magnification->1.25,
FrontEndVersion->"11.0 for Microsoft Windows (64-bit) (July 28, 2016)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 255, 8, 41, "Input"],
Cell[816, 30, 242, 4, 37, "Input"],
Cell[1061, 36, 109, 2, 37, "Input"],
Cell[CellGroupData[{
Cell[1195, 42, 1741, 41, 54, "Input"],
Cell[2939, 85, 8412, 231, 235, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11388, 321, 188, 4, 37, "Input"],
Cell[11579, 327, 3974, 115, 144, "Output"]
}, Open  ]],
Cell[15568, 445, 400, 8, 62, "Input"],
Cell[CellGroupData[{
Cell[15993, 457, 526, 11, 62, "Input"],
Cell[16522, 470, 7573, 225, 235, "Output"]
}, Open  ]],
Cell[24110, 698, 174, 4, 37, "Input"],
Cell[CellGroupData[{
Cell[24309, 706, 1825, 36, 37, "Input"],
Cell[26137, 744, 47414, 788, 339, "Output"]
}, Open  ]],
Cell[73566, 1535, 364, 9, 37, "Input"],
Cell[73933, 1546, 210, 5, 62, "Input"],
Cell[CellGroupData[{
Cell[74168, 1555, 1731, 36, 62, "Input"],
Cell[75902, 1593, 2111, 41, 411, "Output"]
}, Open  ]],
Cell[78028, 1637, 633, 16, 62, "Input"],
Cell[78664, 1655, 259, 6, 62, "Input"],
Cell[CellGroupData[{
Cell[78948, 1665, 786, 19, 37, "Input"],
Cell[79737, 1686, 1836, 36, 395, "Output"]
}, Open  ]],
Cell[81588, 1725, 236, 5, 37, "Input"],
Cell[81827, 1732, 120, 2, 37, "Input"],
Cell[81950, 1736, 172, 4, 37, "Input"],
Cell[82125, 1742, 3987, 100, 147, "Input"],
Cell[86115, 1844, 4022, 77, 703, "Input"],
Cell[90140, 1923, 1424, 29, 134, "Input"],
Cell[91567, 1954, 147, 2, 37, "Input"],
Cell[91717, 1958, 245, 5, 37, "Input"],
Cell[CellGroupData[{
Cell[91987, 1967, 2679, 67, 113, "Input"],
Cell[94669, 2036, 57231, 1130, 169, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[151937, 3171, 657, 16, 37, "Input"],
Cell[152597, 3189, 136694, 2291, 655, "Output"]
}, Open  ]],
Cell[289306, 5483, 1917, 48, 111, "Input"],
Cell[CellGroupData[{
Cell[291248, 5535, 474, 14, 56, "Input"],
Cell[291725, 5551, 283, 9, 58, "Output"]
}, Open  ]],
Cell[CellGroupData[{
Cell[292045, 5565, 299, 9, 37, "Input"],
Cell[292347, 5576, 90, 2, 54, "Output"]
}, Open  ]],
Cell[292452, 5581, 220, 5, 37, "Input"],
Cell[CellGroupData[{
Cell[292697, 5590, 449, 13, 37, "Input"],
Cell[293149, 5605, 10997, 193, 372, "Output"]
}, Open  ]],
Cell[304161, 5801, 92, 1, 37, "Input"],
Cell[304256, 5804, 393, 12, 58, "Input"],
Cell[CellGroupData[{
Cell[304674, 5820, 810, 21, 37, "Input"],
Cell[305487, 5843, 2215, 43, 439, "Output"]
}, Open  ]],
Cell[307717, 5889, 467, 11, 37, "Input"],
Cell[308187, 5902, 92, 1, 37, "Input"],
Cell[308282, 5905, 94, 1, 37, "Input"],
Cell[CellGroupData[{
Cell[308401, 5910, 3209, 85, 134, "Input"],
Cell[311613, 5997, 3602, 71, 643, "Output"]
}, Open  ]],
Cell[315230, 6071, 771, 15, 86, "Input"],
Cell[CellGroupData[{
Cell[316026, 6090, 3447, 91, 134, "Input"],
Cell[319476, 6183, 3821, 76, 673, "Output"]
}, Open  ]],
Cell[323312, 6262, 768, 17, 86, "Input"],
Cell[324083, 6281, 91, 1, 37, "Input"],
Cell[324177, 6284, 93, 1, 37, "Input"],
Cell[CellGroupData[{
Cell[324295, 6289, 3778, 107, 134, "Input"],
Cell[328076, 6398, 4343, 84, 731, "Output"]
}, Open  ]],
Cell[332434, 6485, 1104, 27, 62, "Input"]
}
]
*)

